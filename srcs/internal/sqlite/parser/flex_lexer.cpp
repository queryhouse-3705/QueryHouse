#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 217
#define YY_END_OF_BUFFER 218
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1432] =
    {   0,
        0,    0,  197,  197,    0,    0,    0,    0,    0,    0,
      201,  201,    0,    0,    2,    2,  218,  216,    5,    5,
      216,  216,  189,  195,  189,  189,  192,  189,  189,  189,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  189,  197,  198,  204,  217,  207,
      208,  205,  206,  210,  213,  214,  211,  212,  215,  201,
      202,    2,    2,    3,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    5,
      183,    0,  199,  209,  203,    1,  192,  188,  191,  190,
      185,  184,  182,  186,  194,  194,  194,  194,  194,  194,
      194,  136,  194,  194,  137,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  178,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  138,  194,  139,  140,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  163,  194,
      194,  141,  142,  143,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  144,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  187,  197,  196,  204,
      210,  201,  200,    2,    2,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  193,  190,  194,  122,  194,  123,  194,  194,
      124,  194,  125,   30,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  126,  194,  194,
      194,  148,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  127,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  128,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  129,  194,  194,  194,

      130,   21,  194,  194,  194,  194,  194,  194,  194,  194,
       31,  194,   32,  194,  194,  131,  194,  194,  194,  132,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  158,  194,  194,  194,  133,
      194,  194,  194,   33,  194,  134,  194,  194,  194,  194,
      194,  194,  135,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  194,  194,  194,  194,  194,  194,
      194,  194,   97,  194,   98,  172,   99,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  100,  194,
      194,  194,  194,  194,  101,  194,  194,  194,  102,  157,
      103,  194,  194,  194,  194,  194,  194,  104,  194,  194,
      194,  194,  194,  105,  106,  194,  194,  194,  107,  194,
      147,  194,  194,  194,  194,  194,  108,  194,  109,    9,
      176,   22,  110,  111,  194,  112,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  113,  194,  194,  194,  194,
       15,  194,  194,  194,  114,  194,  194,  194,   19,  194,

      194,  194,  194,  194,  167,  194,  194,  194,  194,  115,
      194,  194,  194,   29,  116,  117,  168,  118,  194,  194,
      180,  194,  194,  194,  194,  194,  194,  194,  194,  119,
      194,  120,  194,  194,  121,  150,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  194,   77,
       78,  194,   79,  194,  155,  194,  194,  154,  194,  194,
      194,  194,   34,  194,   80,  194,  194,  194,  194,  194,
      194,   81,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  181,  194,  177,   82,  194,  194,  194,  194,
       83,  194,  194,   84,   85,  194,  194,  194,  194,  194,
       86,   87,   13,   88,   89,  194,  149,  194,  194,  194,
       23,  175,  194,   90,  194,   91,  194,  194,  194,  194,
      194,  166,  194,  194,  194,  194,   92,  194,  194,  194,
      194,  194,  194,   93,  194,  194,  194,  194,  194,   94,
      194,  194,  194,   95,  194,  194,  194,   96,  194,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        8,  153,   52,  194,  194,  194,   53,  173,  194,   54,
      194,  194,  194,  194,  194,   55,  194,  194,   56,  194,
       57,   58,   59,  194,   60,  194,   27,  194,  194,  194,

      194,   62,  162,   63,   64,  194,   65,  194,  194,   66,
      194,  146,  194,  194,  194,   67,  164,  194,  194,  194,
      194,  194,  194,  194,   68,  194,  194,   69,  145,   70,
       71,   10,   72,  194,  194,  194,  194,  194,   73,   74,
       75,   76,  194,  194,   14,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       42,   43,  179,   44,   45,  194,  159,  194,  194,   46,
      194,  194,  194,  160,   61,  194,  194,    6,  194,  151,
       47,  194,  194,   48,  174,  194,  194,  194,  194,  194,
       49,  194,  194,  194,  194,   50,  194,  194,  194,  156,
      194,   51,   11,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  194,  171,  194,  194,
       39,   40,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,   41,  194,  194,  194,  194,  194,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   16,  194,  194,  194,  161,  152,
       37,  194,   26,  194,  170,  194,  165,   12,  194,  194,
       28,   38,  194,  169,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   35,   17,  194,   25,   36,  194,

        7,   20,  194,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   24,  194,  194,    2,    2,    2,   18,  194,
        2,    2,  194,    2,  194,    2,  194,    2,    4,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    7,
        7,    7,    7,    7,    9,   10,    7,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    7,    7,   12,
       13,   14,    7,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,    1,   42,    7,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   40,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        5,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    6,    1,
        6
    } ;

static const flex_int16_t yy_base[1445] =
    {   0,
        0,    0,  448,  446,   64,   67,   70,   73,  440,  438,
      434,  430,    0,    0,  144,    0,  415, 5693,   71,   74,
      397,    0, 5693,  210,   71,  395,   73,   73,  387,  349,
      263,  198,  314,  204,  206,  364,   69,   74,  198,   61,
       72,  230,  275,  242,  409,  316,    0,  311,  458,  508,
       69,   77,  218,   74,  286,    0,  346,    0, 5693, 5693,
     5693, 5693, 5693,    0, 5693, 5693, 5693, 5693, 5693,    0,
      342,    0,  226,  240,  331,  312,    0,  252,  302,  292,
      274,  288,  284,  279,  569,  624,  678,  732,  786,  840,
      313,  365,  890,  372,  318,  442,  630,  944,  994,  500,

      334,  676, 1046, 1100,  724,  416,  460,  364,  217,  305,
     5693,  270, 5693, 5693, 5693, 5693,  304, 5693,  261,  219,
     5693, 5693, 5693, 5693,    0,   62,   80,  201,  499,  220,
      290,  321,  320,  627,    0,  359,  470,  732,  369,  353,
      435,  495,  782,  622,  360,  368,  390,  414,  431,  442,
      685,  443,  677,  484,  680,  488,  494,  507,  509,  514,
      668,  611,    0,  621,  788,  630,  642,  638,  677,  729,
      750,  782,  796,  715,  695,  738,  741,  740,  741,  795,
      794,  803,    0,  809,  806,  795,  813,  801,  828,  849,
      848,  837,  857,  847,  833,  851,  890,  847,  850,  854,

      859,  875,  887,  894,  903,  906,  901,  905,  948,  909,
      914,  944,  948,  924,  947,  933, 5693,    0, 5693,    0,
        0,    0, 5693,    0,  448,    0,  219,    0,    0,    0,
        0,  442,    0,  211,  209,    0,    0,    0,    0,  967,
      998,  972, 1030, 1087, 1005,  999, 1031, 1006, 1143, 1052,
     1063, 1121, 1193, 1098, 1135, 1140, 1168, 1247, 1165, 1175,
     1176, 1235, 1239, 1245, 1249, 1289, 1221, 1279, 1271, 1306,
     1307, 1305, 1323, 1329, 1330, 1353, 1331, 1203, 1363, 1414,
     1357, 1371, 1387, 1381, 1417, 1439, 1441, 1455, 1472, 1425,
     1477, 1485, 1483, 1493, 1525, 1510, 1518, 1511, 1536, 1541,

     1551, 1533, 1555, 1563, 1581, 1587, 1579, 1639, 1594, 1609,
     1615, 1634, 1642, 1660, 1645, 1667, 1679, 1686, 1692, 1549,
     1690, 1714, 1697, 1748, 1733, 1747, 1737, 1758, 1602, 1783,
     1789,    0, 5693,  132,  942,    0,  949,    0,  968, 1057,
        0, 1061,    0,    0, 1054, 1105, 1104, 1121, 1790, 1117,
     1163, 1382, 1190, 1196, 1225, 1250, 1237,    0, 1267, 1351,
     1795,    0, 1358, 1419, 1793, 1407, 1435, 1471, 1458, 1498,
     1532, 1618, 1695,    0, 1711, 1765, 1717, 1757, 1761, 1810,
     1788, 1810, 1804, 1813, 1807, 1809, 1823, 1829, 1812, 1826,
     1826, 1820, 1826, 1841, 1843, 1846, 1850, 1831, 1839, 1840,

        0,    0, 1836, 1854, 1841, 1861, 1859, 1865, 1870, 1869,
        0, 1866, 1853, 1856, 1857, 1871,   97, 1874, 1876, 1870,
     1886, 1887, 1888, 1878, 1903, 1896, 1892, 1906, 1897, 1905,
     1890, 1908, 1913, 1899, 1916, 1907, 1922, 1914, 1925,    0,
     1908, 1912, 1916,    0, 1925,    0, 1928, 1926, 1933, 1930,
     1945, 1946,    0, 1947, 1952, 1947, 1950, 1949, 1967, 1955,
     1949, 1968, 1949, 1954, 1963, 1978, 1976, 1967,    0,  126,
     1983, 1982, 1984, 1990, 1997, 2018, 2000, 2025, 2007, 2015,
     2041, 2048, 2037, 2053, 2078, 2059, 2042, 2096, 2106, 2095,
     2100, 2117, 2133, 2099, 2111, 2150, 2158, 2136, 2152, 2171,

     2169, 2190, 2195, 2157, 2194, 2205, 2197, 2227, 2212, 2216,
     2252, 2235, 2249, 2253, 2260, 2268, 2279, 2290, 2287, 2285,
     2313, 2311, 2300, 2335, 2325, 2324, 2348, 2338, 2359, 2337,
     2343, 2365, 2383, 2375, 2390, 2396, 2382, 2389, 2406, 2437,
     2427, 2423, 2429, 2441, 2448, 2481, 2454, 2480, 2475, 2487,
     2498, 2464, 2499, 2505, 2515, 2526, 2532, 2533, 2537, 2545,
     2563, 2570, 2571, 2595, 2576, 2608, 2601, 2598, 2606, 2633,
     2629, 2640, 2616, 2656, 2651, 2652, 2668, 2679, 2690, 2667,
     2684, 2673, 2698, 2692, 2725, 2726, 2724, 2729, 2730, 2760,
     2737, 2761, 2772, 2767, 2768, 2756, 2783, 2804, 2807, 2814,

     2826, 2820, 2841, 2837, 1989, 2021, 2045, 2045, 2055, 2079,
     2142, 2174,    0, 2215,    0,    0,    0, 2215, 2232, 2221,
     2258, 2254, 2260, 2356, 2364,   91, 2401, 2420,    0, 2452,
     2444, 2448, 2525, 2538, 2543, 2562, 2630, 2634,    0,    0,
        0, 2695, 2703, 2802, 2807, 2827, 2830,    0, 2838, 2827,
     2830, 2850, 2858,    0,    0, 2852, 2876, 2865,    0, 2868,
        0, 2865, 2861, 2868, 2869, 2882,    0, 2876,    0,    0,
       73,    0,    0,    0, 2870,    0, 2880, 2885, 2892, 2882,
     2890, 2885, 2895, 2883, 2902, 2889, 2904, 2895, 2902, 2905,
        0, 2911, 2916, 2923,    0, 2930, 2938, 2935,    0, 2923,

     2925, 2931, 2927, 2926,    0, 2933, 2935, 2936, 2948,    0,
     2950, 2951, 2953, 2944,    0,    0,    0, 2941, 2947, 2955,
        0, 2942, 2951, 2945, 2966, 2951, 2971, 2976, 2974,    0,
     2962,    0, 2981, 2978,    0,    0, 2993, 2996, 2998, 2992,
     2994, 3015, 3030, 3000, 3004, 3052, 3026, 3031, 3034, 3056,
     3069, 3058, 3070, 3073, 3096, 3097, 3100, 3084, 3110, 3124,
     3127, 3128, 3138, 3151, 3165, 3152, 3155, 3162, 3188, 3186,
     3178, 3196, 3199, 3209, 3212, 3210, 3231, 3244, 3213, 3234,
     3236, 3257, 3267, 3268, 3270, 3271, 3284, 3289, 3312, 3294,
     3295, 3326, 3310, 3327, 3329, 3350, 3352, 3360, 3322, 3367,

     3366, 3368, 3384, 3385, 3390, 3398, 3406, 3400, 3423, 3422,
     3411, 3448, 3438, 3424, 3461, 3469, 3456, 3464, 3475, 3483,
     3488, 3506, 3480, 3514, 3516, 3482, 3521, 3527, 3542, 3539,
     3540, 3544, 3561, 3546, 3572, 3579, 3558, 3596, 3598, 3600,
     3584, 3597, 3602, 3612, 3619, 3630, 3624, 3636, 3637, 3658,
     3654, 3660, 3655, 3677, 3690, 3682, 3700, 3715, 3712, 3688,
     3713, 3718, 3734, 3736, 3740, 3748, 3746, 3751, 2999,    0,
        0, 3120,    0, 3174,    0, 3218, 3225,    0, 3235, 3283,
     3310, 3318,    0, 3353,    0, 3384, 3398, 3432, 3435, 3492,
     3523,    0,   70, 3638, 3637, 3667, 3694, 3695, 3737, 3754,

     3741, 3759,    0, 3757,   67,    0, 3754, 3771, 3778, 3769,
     3764, 3786, 3775, 3791,    0, 3777, 3793, 3780, 3789, 3781,
        0,    0,    0,    0,    0, 3804,    0, 3810, 3799, 3813,
        0,    0, 3795,    0, 3797,    0, 3812, 3798, 3805, 3816,
     3803,    0, 3804, 3824, 3826, 3824,    0, 3813, 3834, 3832,
     3817, 3835, 3837, 3832, 3835, 3834, 3841, 3851, 3843,    0,
     3854, 3857, 3862,    0, 3850, 3870, 3871,    0, 3850, 3889,
     3870, 3872, 3874, 3882, 3884, 3886, 3887, 3925, 3900, 3922,
     3930, 3926, 3947, 3914, 3932, 3940, 3965, 3978, 3977, 3962,
     3983, 3980, 3984, 4010, 3988, 4020, 4022, 3995, 4018, 4028,

     4046, 4036, 4063, 4053, 4068, 4076, 4058, 4086, 4089, 4103,
     4101, 4122, 4114, 4111, 4119, 4124, 4141, 4129, 4162, 4157,
     4167, 4146, 4154, 4159, 4169, 4172, 4180, 4194, 4219, 4217,
     4231, 4204, 4212, 4220, 4225, 4238, 4230, 4242, 4257, 4273,
     4276, 4265, 4263, 4270, 4288, 4289, 4316, 4295, 4310, 4327,
     4333, 4328, 4351, 4364, 4340, 4368, 4358, 4366, 4370, 4385,
     4391, 4396, 4409, 4398, 4401, 4412, 4428, 4439, 4422, 4436,
        0,    0,    0, 3867, 4023, 4025, 4027,    0, 4048,    0,
     4094, 4166, 4185, 4209, 4285,    0, 4361, 4434,    0, 4435,
        0,    0,    0, 4443,    0, 4429,    0, 4429, 4445, 4443,

     4448,    0,    0,    0,    0, 4467,    0, 4454, 4469,    0,
     4474,    0, 4467, 4474, 4472,    0,    0, 4465, 4478, 4469,
     4482, 4467, 4485, 4481,    0, 4493, 4485, 4480,    0,    0,
        0,    0,    0, 4501, 4504, 4501, 4489, 4505,    0,    0,
        0,    0, 4493, 4500,    0, 4512, 4514, 4517, 4538, 4524,
     4525, 4528, 4539, 4549, 4550, 4560, 4575, 4572, 4583, 4582,
     4594, 4600, 4608, 4596, 4635, 4607, 4618, 4630, 4640, 4641,
     4648, 4646, 4654, 4676, 4673, 4686, 4658, 4665, 4688, 4698,
     4713, 4699, 4716, 4720, 4723, 4750, 4724, 4731, 4754, 4757,
     4739, 4761, 4776, 4778, 4789, 4797, 4792, 4815, 4814, 4802,

     4839, 4816, 4840, 4829, 4842, 4847, 4850, 4855, 4861, 4877,
     4872, 4874, 4908, 4880, 4885, 4893, 4895, 4898, 4912, 4925,
        0,    0,    0,    0,    0, 4541,    0, 4562, 4626,    0,
     4656, 4726, 4719,    0,    0, 4770, 4762,    0, 4784,    0,
        0, 4919, 4913,    0,    0, 4914, 4931, 4923,   64, 4926,
        0, 4921, 4941, 4928, 4953,    0, 4938, 4944, 4935,    0,
     4955,    0,    0, 4956, 4958, 4963, 4966, 4969, 4977, 4970,
     4973, 5004, 4988, 5014, 4996, 5021, 5003, 5011, 5042, 5035,
     5027, 5028, 5046, 5049, 5061, 5072, 5054, 5080, 5086, 5085,
     5087, 5093, 5118, 5099, 5120, 5125, 5124, 5158, 5112, 5130,

     5157, 5162, 5163, 5170, 5175, 5176, 4950,    0, 4986, 5073,
        0,    0, 5097, 5158, 5165, 5156, 5165, 5185, 5175, 5188,
     5185, 5199, 5202, 5203,    0, 5208, 5193, 5204,   61, 5217,
     5218, 5220, 5221, 5234, 5228, 5235, 5239, 5251, 5261, 5258,
     5276, 5266, 5291, 5294, 5293, 5297, 5298, 5309, 5316, 5319,
     5324, 5330, 5331, 5357,    0, 5223, 5250, 5263,    0,    0,
        0, 5334,    0, 5323,    0, 5353,    0,    0, 5338, 5341,
        0,    0, 5355,    0, 5362, 5364, 5369, 5372, 5367, 5374,
     5395, 5399, 5400, 5412, 5402, 5414, 5407, 5425, 5433, 5437,
     5438, 5440, 5464, 5452,    0,    0, 5376,    0,    0, 5421,

        0,    0, 5442, 5465, 5468, 5475, 5478, 5480, 5483, 5490,
     5491, 5496,    0, 5467, 5457, 5508, 5530, 5515,    0, 5487,
     5518, 5523, 5512, 5546, 5513, 5548, 5532, 5554,    0, 5542,
     5693, 5622, 5628, 5634, 5640, 5646, 5652,   74, 5658, 5664,
     5669, 5674, 5680, 5686
    } ;

static const flex_int16_t yy_def[1445] =
    {   0,
     1431,    1, 1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435,
     1436, 1436, 1435, 1435, 1431,   15, 1431, 1431, 1431, 1431,
     1431, 1437, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1431, 1439, 1431, 1440, 1431, 1431,
     1431, 1431, 1431, 1441, 1431, 1431, 1431, 1431, 1431, 1442,
     1431, 1443, 1443, 1431, 1443, 1444, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1431,   85,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86, 1443, 1431,
     1431, 1437, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1431, 1439, 1431, 1440,
     1441, 1442, 1431, 1443, 1443, 1443, 1444, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   89,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86, 1443, 1431, 1431, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1443, 1443,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86, 1438, 1438, 1438, 1438, 1438, 1438,

     1438, 1438, 1438,   86,   86,   86,   86,   86,   86,   86,
       86,   86, 1438, 1438, 1438,   86,   86,   86, 1438, 1438,
       86,   86, 1438,   86, 1438,   86, 1438,   86, 1438,   86,
        0, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431
    } ;

static const flex_int16_t yy_nxt[5765] =
    {   0,
       18,   19,   20,   21,   22,   18,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   47,   54,   47,
       23,   23,   18,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   47,   54,   23,   55,
       23,   59,  110,  110,   59,  110,  110,   59,  125,  116,
       59,  117,  120,  117,  118,  121,  122,  158,  161,  167,
      169,  212,  216,  168,  159,  335,  209,  336,  210,  213,

      160,  211,  162, 1373,   60,   61, 1321,   60,   61, 1098,
       65,   66, 1087,   65,   66,  920,  158,  161,  167,  169,
      212,  216,  168,  159,  335,  209,  336,  210,  213,  160,
      211,  162,   62,  886,   63,   62,  470,   63,   67,  684,
       68,   67,  334,   68,   72,   73,   74,   75,   76,   72,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  101,  108,  101,   77,   77,   72,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,

       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      101,  108,   77,  109,   77,  113,  134,  163,  142,  470,
      147,  234,  143,  469,  164,  165,  144,  225,  110,  334,
      166,  148,  145,  149,  337,  146,  135,  341,  150,  214,
      215,  110,  110,  151,  170,  134,  163,  142,  171,  147,
      114,  143,  172,  164,  165,  144,  178,  228,  173,  166,
      148,  145,  149,  337,  146,  135,  341,  150,  214,  215,
      179,  119,  151,  170,  333,  180,  181,  171,  115,  126,
      127,  172,  128,  235,  232,  178,  332,  173,  129,  174,
      130,  239,  229,  175,  131,  132,  238,  176,  133,  179,

      236,  237,  234,  177,  180,  181,  110,  110,  126,  127,
      231,  128,  232,  120,  117,  233,  224,  129,  174,  130,
      230,  342,  175,  131,  132,  192,  176,  133,  136,  193,
      188,  273,  177,  194,  189,  137,  284,  343,  274,  195,
      344,  190,  138,  226,  275,  139,  140,  191,  141,  223,
      342,  240,  240,  219,  192,  217,  240,  136,  193,  188,
      273,  124,  194,  189,  137,  284,  343,  274,  195,  344,
      190,  138,  240,  275,  139,  140,  191,  141,  152,  276,
      240,  240,  331,  240,  348,  240,  153,  356,  358,  154,
      240,  349,  155,  277,  370,  156,  371,  357,  157,  123,

      282,  240,  240,  240,  283,  119,  372,  152,  276,  111,
      240,  331,  240,  348, 1431,  153,  356,  358,  154,  240,
      349,  155,  277,  370,  156,  371,  357,  157,  182,  282,
      327,  240,  240,  283,  240,  372,  183,   71,  328,  240,
      184,   71,  185,  186,  187,   69,  373,   69,  374,  225,
      110,  235,  232,   57,  240,   57,  285,  182,  375,  327,
      286,  359, 1431,  240,  287,  183,  360,  328,  379,  184,
      288,  185,  186,  187,  196,  373,  197,  374,  240,  198,
      240,  329,  330,  240,  350,  285,  199,  375,  351,  286,
      359,  200,  201,  287, 1431,  360, 1431,  379,  240,  288,

     1431, 1431, 1431,  196, 1431,  197, 1431,  240,  198,  240,
      329,  330,  382,  350,  303,  199,  385,  351,  304,  386,
      200,  201,  202,  203,  338,  305,  204,  240,  361,  205,
      206,  306,  339,  362,  387,  340,  207,  388,  240,  208,
     1431,  382,  389,  303, 1431,  385, 1431,  304,  386, 1431,
     1431,  202,  203,  338,  305,  204, 1431,  361,  205,  206,
      306,  339,  362,  387,  340,  207,  388,  240,  208,  224,
      224,  389,  224,  224,  224,  224,  224,  224,  224,  240,
      224,  224,  224,  240,  240,  241,  242,  240,  243,  240,
      240,  240,  240,  240,  244,  240,  245,  240,  240,  240,

      246,  247,  240,  240,  248,  240,  240,  240,  240,  224,
      224,  240,  240,  240,  241,  242,  240,  243,  240,  240,
      240,  240,  240,  244,  240,  245,  240,  240,  240,  246,
      247,  240,  240,  248,  240,  240,  240,  224,  224,  224,
      240,  240,  249,  240,  289,  392,  345,  346,  290,  240,
      393,  240,  291,  368,  369,  240,  240,  398,  292,  240,
      347, 1431,  250, 1431,  399, 1431,  400, 1431,  240,  240,
      240,  249,  240,  289,  392,  345,  346,  290,  240,  393,
      240,  291,  368,  369,  240,  240,  398,  292,  240,  347,
      307,  250,  251,  399,  308,  400,  240,  240,  309,  252,

      390,  376,  380,  391,  310,  383,  253,  377,  381,  254,
      255,  384,  256, 1431,  240,  401,  240, 1431,  378,  307,
     1431,  251, 1431,  308, 1431,  240,  412,  309,  252,  390,
      376,  380,  391,  310,  383,  253,  377,  381,  254,  255,
      384,  256,  240,  240,  401,  240,  257,  378,  410,  402,
      258,  324,  411,  325,  259,  412,  326,  352,  353,  354,
      260,  403,  240,  261,  404,  413,  355, 1431,  414,  405,
      240,  240, 1431,  415,  416,  257, 1431,  410,  402,  258,
      324,  411,  325,  259, 1431,  326,  352,  353,  354,  260,
      403,  240,  261,  404,  413,  355,  363,  414,  405,  240,

      262,  364,  415,  416,  240,  394,  406,  365,  407,  366,
      408,  263,  409,  264,  367,  395,  417,  418,  265,  419,
      396,  397,  420,  266,  240,  363,  421,  422,  423,  262,
      364,  424,  425,  240,  394,  406,  365,  407,  366,  408,
      263,  409,  264,  367,  395,  417,  418,  265,  419,  396,
      397,  420,  266,  240,  267,  421,  422,  423,  240,  426,
      424,  425,  268,  427,  430,  269,  428,  435,  270,  436,
      429,  271,  437,  431,  272,  441,  432, 1431,  240, 1431,
     1431,  442,  443,  267,  433,  444, 1431,  240,  426,  434,
      445,  268,  427,  430,  269,  428,  435,  270,  436,  429,

      271,  437,  431,  272,  441,  432,  438,  240,  240,  278,
      442,  443,  446,  433,  444,  439,  279,  280,  434,  445,
      447,  449,  281,  440,  450,  452,  459,  454,  240, 1431,
      453,  448,  451, 1431, 1431,  438,  460,  240,  278,  455,
     1431,  446,  465, 1431,  439,  279,  280,  468, 1431,  447,
      449,  281,  440,  450,  452,  459,  454,  240,  293,  453,
      448,  451,  240,  456,  605,  460,  463,  606,  455,  461,
      457,  465,  294,  458,  466,  462,  468,  295,  296,  464,
      467, 1431,  240, 1431, 1431,  240,  607,  293, 1431,  472,
      240,  240,  456,  605, 1431,  463,  606, 1431,  461,  457,

     1431,  294,  458,  466,  462,  240,  295,  296,  464,  467,
      240,  240,  240,  297,  240,  607,  240,  240,  472,  240,
     1431,  298,  477,  240,  240,  299,  480,  300,  301,  302,
      478,  471,  240, 1431,  240, 1431,  240,  240, 1431,  240,
     1431,  240,  297,  240,  240,  240,  240,  479,  240,  240,
      298,  477,  240,  240,  299,  480,  300,  301,  302,  478,
      471,  240,  311,  473,  312,  240,  240,  313,  240,  240,
      240,  608,  240,  240,  314,  609,  479,  240,  240,  315,
      316,  240,  610, 1431,  240, 1431, 1431, 1431,  484, 1431,
      240,  311,  473,  312, 1431,  485,  313,  240,  240,  240,

      608,  240, 1431,  314,  609,  240, 1431, 1431,  315,  316,
      240,  610,  474,  240,  317,  318,  492,  484,  319,  240,
      475,  320,  321,  476,  485,  240,  493,  611,  322, 1431,
      240,  323, 1431, 1431,  240,  486,  240, 1431,  240,  487,
      612,  474, 1431,  317,  318,  492,  613,  319,  617,  475,
      320,  321,  476,  240,  240,  493,  611,  322,  240,  240,
      323,  240,  481,  482,  486,  240,  495,  240,  487,  612,
      494,  496, 1431,  240, 1431,  613,  483,  617,  240,  618,
     1431,  240,  240,  240, 1431, 1431,  240,  240,  240, 1431,
      240,  481,  482,  240,  240,  495,  504,  505, 1431,  494,

      496,  497,  240,  240,  507,  483,  498,  240,  618,  506,
      240,  240,  240,  240,  240,  240,  621, 1431,  488,  489,
      490,  240,  240,  240, 1431,  504,  505,  491, 1431,  622,
      497,  240,  240,  507, 1431,  498, 1431, 1431,  506,  240,
      240,  240,  240,  240, 1431,  621,  515,  488,  489,  490,
      240,  508,  623,  240, 1431, 1431,  491,  240,  622,  240,
      240,  499,  510,  240,  624,  511,  500,  240,  240,  625,
      240,  509,  501,  240,  502,  515, 1431,  240, 1431,  503,
      508,  623,  240,  240,  240,  626,  240,  240,  240,  240,
      499,  510,  240,  624,  511,  500,  240,  240,  625,  518,

      509,  501,  240,  502,  516,  512,  240,  240,  503,  240,
      517,  513,  240,  240,  626, 1431,  240,  240,  240, 1431,
     1431, 1431,  514,  240,  240,  240,  240,  240,  518, 1431,
      522,  519, 1431,  516,  512,  521,  240,  520,  240,  517,
      513,  240, 1431,  240,  240,  240,  240,  240,  240,  240,
      523,  514,  240,  240,  240, 1431,  240,  524,  525,  522,
      519,  240, 1431, 1431,  521,  528,  520,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  523,
     1431,  240,  627,  630,  534,  526,  524,  525,  527,  240,
      240,  240,  529,  535,  528,  240,  240,  240,  240,  240,

      240,  240, 1431, 1431,  240,  240, 1431,  619, 1431,  240,
      240,  627,  630,  534,  526,  536,  620,  527,  240,  537,
      240,  529,  535, 1431,  240,  240, 1431, 1431,  240, 1431,
      240,  530,  240,  631,  240,  240,  619,  538,  240,  634,
     1431,  531, 1431,  240,  536,  620,  532,  533,  537,  539,
     1431,  635,  240,  540,  240,  240,  548,  240,  541,  240,
      530,  240,  631,  240,  240,  542,  538,  543,  634,  544,
      531,  545,  240,  240, 1431,  532,  533,  240,  539,  240,
      635,  240,  540, 1431,  240,  548,  240,  541,  240,  636,
      240,  637,  240,  240,  542,  240,  543, 1431,  544, 1431,

      545,  240,  240,  240,  549,  546,  240, 1431,  240,  547,
      240,  240,  550,  638, 1431,  240,  551, 1431,  636,  240,
      637,  240,  240,  240,  240, 1431,  552, 1431,  240,  240,
      240,  240,  240,  549,  546,  555,  240,  556,  547,  240,
      240,  550,  638,  240,  240,  551,  553,  554,  240,  240,
      240,  560,  240,  557,  240,  552,  240,  240,  240,  240,
      240,  639,  558,  240,  555,  240,  556,  585, 1431,  240,
     1431,  240,  240,  240,  240,  553,  554,  240,  240,  240,
      560,  240,  557,  240,  559,  240,  561,  240,  240,  240,
      639,  558,  240,  240,  562,  563,  585,  240,  240,  240,

      240,  240,  240,  240, 1431,  564,  566, 1431,  240,  565,
      240, 1431,  240,  559,  571,  561,  240,  240,  240,  240,
      601, 1431,  240,  562,  563,  240,  240,  240,  240, 1431,
      240, 1431,  240,  240,  564,  566,  573, 1431,  565,  640,
      240,  240, 1431,  571, 1431,  572,  240,  240,  240,  601,
      574, 1431,  240,  240,  240,  567,  240,  240,  568,  575,
      240,  240,  240,  240, 1431,  573,  569,  576,  640,  240,
      577,  570,  240,  579,  572, 1431,  240,  240,  240,  574,
      240,  240,  240,  240,  567,  240,  240,  568,  575,  240,
     1431,  578,  240,  580,  581,  569,  576,  240,  240,  577,

      570,  240,  579, 1431,  240,  240,  240,  240,  586,  240,
      240,  582,  240,  641,  240,  240,  587,  240,  583,  590,
      578, 1431,  580,  581,  240,  642,  240,  240,  240,  584,
      240,  591,  240,  240,  240,  240, 1431,  586,  588,  240,
      582, 1431,  641,  589,  240,  587,  240,  583,  590,  645,
      595,  240,  240,  240,  642,  240, 1431,  240,  584,  240,
      591,  240,  597,  592,  240,  240,  240,  588,  598,  596,
      593,  240,  589,  594, 1431,  240,  599, 1431,  645,  595,
      240,  240, 1431,  643,  240,  240,  240, 1431,  646,  600,
      644,  597,  592,  647,  240,  240,  240,  598,  596,  593,

      240,  240,  594,  604,  240,  599,  614,  240,  615,  628,
      602,  632,  643,  629,  240,  240,  603,  646,  600,  644,
      650,  240,  647,  616,  651,  240,  633,  240,  648,  652,
      240,  653,  604,  654,  655,  614,  240,  615,  628,  602,
      632,  656,  629,  649,  657,  603,  658,  659,  660,  650,
      240,  661,  616,  651,  662,  633,  240,  648,  652,  663,
      653,  664,  654,  655,  665,  668,  669,  670,  666,  671,
      656,  672,  649,  657,  673,  658,  659,  660,  667,  674,
      661,  675,  676,  662,  677,  678,  679,  680,  663,  681,
      664,  682,  683,  665,  668,  669,  670,  666,  671,  685,

      672,  686,  687,  673,  688,  689,  690,  667,  674,  691,
      675,  676,  694,  677,  678,  679,  680,  692,  681,  695,
      682,  683,  696,  697,  700,  698,  701,  702,  685,  699,
      686,  687,  703,  688,  689,  690,  693,  704,  691,  705,
      707,  694,  708,  709,  710,  711,  692,  712,  695,  706,
      713,  696,  697,  700,  698,  701,  702,  714,  699,  715,
      716,  703,  717,  718,  719,  693,  704,  720,  705,  707,
      721,  708,  709,  710,  711,  722,  712,  725,  723,  713,
      724,  726,  727,  728,  729,  730,  714,  731,  715,  716,
      732,  717,  718,  719,  733,  734,  720,  735,  736,  721,

      240,  240,  738, 1431,  722,  737,  725,  723,  240,  724,
      726,  727,  728,  729,  730,  739,  731,  869,  240,  732,
      240,  240,  240,  733,  734,  240,  735,  736,  240,  240,
      240,  738,  740,  240,  737,  240,  240,  240,  240,  741,
     1431, 1431, 1431,  240,  739,  240,  869,  240, 1431,  240,
      240,  240,  870,  240,  240,  240,  240,  240,  750,  240,
      240,  740,  240,  240,  240,  240,  240,  240,  741,  742,
      743,  240,  240,  744,  240,  240,  871,  240,  745,  240,
      240,  870,  240,  872,  240,  240,  240,  750,  240,  240,
      749,  240,  240,  873,  746,  240,  747,  240,  742,  743,

      240, 1431,  744, 1431,  240,  871,  240,  745,  240,  240,
      874,  748,  872,  240,  240,  240,  240,  240,  240,  749,
      240,  751,  873,  746,  240,  747,  240,  755,  754,  758,
      752,  756,  753,  240,  240,  240, 1431,  240,  240,  874,
      748, 1431,  240,  240,  240,  240,  240,  240, 1431,  240,
      751,  240, 1431,  240,  240,  240,  755,  754,  758,  752,
      756,  753,  240,  240,  240,  757,  240,  240,  240,  875,
      240,  240,  760,  240,  240,  768,  761,  762,  240, 1431,
      240,  759, 1431,  240,  240,  763, 1431,  764,  240,  240,
      240, 1431,  876, 1431,  757,  240,  240,  240,  875,  240,

      240,  760,  765,  240,  768,  761,  762,  240,  240,  240,
      759,  767,  240,  240,  763,  240,  764,  240,  240,  240,
      770,  876,  766,  240,  240,  240,  771,  769,  240,  877,
      773,  765,  240,  240,  240,  240,  240,  240,  240,  878,
      767,  240,  240,  240,  240,  240,  879,  880,  772,  770,
      240,  766,  240,  775,  240,  771,  769,  240,  877,  773,
      776,  240,  240,  240,  240,  240,  774,  240,  878, 1431,
      240,  240,  240,  240,  240,  879,  880,  772,  240,  240,
      881,  777,  775,  240,  778,  882,  780,  240, 1431,  776,
      240,  240,  779,  883,  240,  774,  240,  240,  240,  240,

      240,  781,  240,  785,  783,  240,  240,  240,  240,  881,
      777,  782,  784,  778,  882,  780,  240,  240,  788,  240,
      240,  779,  883,  240, 1431,  240,  240,  240,  240,  240,
      781,  240,  785,  783,  240,  240,  787,  240,  240,  786,
      782,  784,  240,  240, 1431,  791,  240,  788, 1431,  240,
      789,  240,  240,  240,  240,  795,  240,  240,  240,  790,
      240,  796,  240,  240, 1431,  787,  240,  240,  786,  793,
      792,  240,  240,  240,  791,  240,  240,  240,  240,  789,
      240,  240,  240,  797,  795,  240,  240,  794,  790,  884,
      796,  240,  240,  240, 1431,  240,  885,  240,  793,  792,

      240,  798,  240,  240,  240,  240,  240,  240,  240,  800,
      240,  799,  797,  240,  240,  240,  794,  801,  884,  887,
      240,  240,  240,  802,  240,  885,  240,  240,  240,  240,
      798, 1431,  240, 1431,  240,  888,  240,  240,  800,  803,
      799,  806,  240,  240,  240,  240,  801,  240,  887,  240,
      240,  807,  802,  240,  804,  240,  240,  240,  808,  240,
      805,  240,  809,  240,  888,  240,  240,  240,  803, 1431,
      806, 1431,  240,  240,  240,  240,  240,  889,  890,  240,
      807,  891,  240,  804,  240,  815,  240,  808,  240,  805,
      240,  809,  240,  240,  240,  240,  240,  810,  240,  240,

      811,  240,  240, 1431,  240,  240,  889,  890,  240,  812,
      891,  240, 1431,  240,  815,  240,  240,  240,  240,  240,
      813,  240,  240,  240, 1431,  240,  810,  240,  240,  811,
      817,  240,  814,  240,  240, 1431,  240,  240,  812,  892,
      818,  816,  240,  240,  240,  240,  240,  240,  240,  813,
      820,  821,  240,  240,  240,  822,  893, 1431,  819,  817,
     1431,  814,  240,  240,  240,  240,  240, 1431,  892,  818,
      240,  240,  240,  240,  894,  240,  823,  824,  895,  820,
      821,  240,  240,  240,  822,  893,  826,  819,  240,  240,
     1431, 1431,  240,  240,  240, 1431,  825, 1431,  827,  240,

      240,  240,  829,  894,  240,  823,  824,  895,  240,  240,
      240,  828,  240,  240,  240,  826,  833,  240,  240,  240,
      834, 1431, 1431,  240,  240,  825,  240,  827,  830, 1431,
      240,  829,  831,  240,  839,  832,  240,  240,  240,  240,
      828, 1431,  240,  240,  240,  833,  240,  240,  240,  834,
      836,  240,  896,  240,  240,  240, 1431,  830,  240,  897,
     1431,  831,  240,  839,  832,  240,  835,  240,  240,  841,
      240,  240,  837,  240,  240,  240,  240, 1431,  240,  836,
      240,  896,  838,  240,  840,  240,  240,  240,  897,  240,
      240,  240, 1431, 1431,  240,  835,  240,  240,  841,  240,

      240,  837,  240,  240,  842,  240,  240,  240,  240,  845,
      240,  240,  843,  840,  240,  240,  240,  240,  240,  240,
      240,  844,  240,  240,  898,  847,  240,  846,  240, 1431,
      240,  240,  899,  842,  240,  240,  240,  240,  845,  240,
      240,  843,  850,  240,  240,  240,  240,  851,  240, 1431,
      844,  240,  848,  898,  847,  853,  846,  240,  849,  240,
     1431,  899,  240,  240,  240,  240, 1431,  240,  240, 1431,
     1431,  850,  240,  240,  240,  240,  851,  240,  240,  240,
      852,  848,  858,  859,  853,  240,  240,  849, 1431,  854,
      240,  240,  240,  240,  240,  857,  240,  240,  240,  240,

      855,  240,  856,  240,  240,  240,  240,  240,  240,  852,
      240,  858,  859, 1431,  240,  240, 1431,  860,  854,  240,
      861,  240,  240,  240,  857,  240, 1431,  240,  240,  855,
      240,  856,  240, 1431,  240,  240,  900,  866,  240,  240,
      901,  902,  240,  862,  240,  240,  860,  863,  903,  861,
      240,  240,  240,  864,  240,  240,  904,  865,  240,  240,
      905,  240,  867,  906,  240,  900,  866,  240,  868,  901,
      902,  240,  862,  240,  240,  240,  863,  903,  907,  240,
      908,  240,  864,  909,  240,  904,  865,  240,  240,  905,
      910,  867,  906,  240,  911,  912,  913,  868,  914,  915,

      916,  919,  917,  921,  240,  922,  923,  907,  240,  908,
      924,  927,  909,  918,  925,  926,  928,  929,  930,  910,
      931,  932,  933,  911,  912,  913,  934,  914,  915,  916,
      919,  917,  921,  935,  922,  923,  936,  937,  938,  924,
      927,  939,  918,  925,  926,  928,  929,  930,  940,  931,
      932,  933,  941,  942,  943,  934,  944,  945,  946,  947,
      948,  949,  935,  950,  951,  936,  937,  938,  952,  953,
      939,  954,  955,  956,  957,  958,  959,  940,  960,  961,
      962,  941,  942,  943,  963,  944,  945,  946,  947,  948,
      949,  964,  950,  951,  965,  966,  967,  952,  953,  968,

      954,  955,  956,  957,  958,  959,  969,  960,  961,  962,
      240,  240,  240,  963,  240, 1431,  240, 1431,  977, 1431,
      964,  970,  240,  965,  966,  967, 1071,  971,  968,  972,
      973,  240,  974,  240,  240,  969,  240, 1431,  240,  240,
      240,  240,  240,  240,  240,  240,  975,  977,  240,  240,
      970,  240,  240,  240, 1431, 1071,  971,  976,  972,  973,
      240,  974,  240,  240,  240,  240,  978,  240,  240,  240,
      240,  240,  240,  240,  240,  975,  240,  240,  240, 1431,
      979,  240,  240,  980,  981, 1431,  976,  240,  240, 1431,
      240,  240,  982,  240,  240,  978,  240,  240,  240,  240,

     1431,  240,  240,  240,  983,  240, 1431,  240,  240,  979,
     1431,  240,  980,  981,  240,  240,  240,  240,  240,  240,
      240,  982,  240,  240, 1431,  240,  987, 1431,  988,  984,
      985,  240,  986,  983,  240,  240,  240,  240,  240,  989,
      240, 1431,  240,  240,  240,  240,  240,  240,  240, 1431,
     1431,  240, 1072,  990, 1431, 1431,  240,  988,  984,  985,
     1431,  986,  240,  240,  240,  240,  240,  240,  989,  240,
      994,  240,  991,  240,  240,  240,  240,  240,  996,  993,
      240, 1072,  990,  240,  992,  240,  995, 1431, 1431,  240,
      240,  240, 1073,  240,  240,  240,  240, 1431,  240,  994,

      240,  991,  240,  240,  240,  240,  240,  996,  993,  240,
      997,  998,  240,  992,  240,  995,  240,  240,  240,  240,
     1431, 1073,  240, 1431,  240,  240,  240,  240,  240,  240,
      240, 1004,  240,  240,  240,  240, 1074,  240,  999,  997,
      998, 1000, 1075,  240, 1001,  240,  240,  240,  240,  240,
      240,  240,  240,  240, 1005,  240,  240,  240, 1003,  240,
     1004, 1431,  240,  240, 1002, 1074,  240,  999, 1076,  240,
     1000, 1075,  240, 1001,  240,  240,  240,  240,  240,  240,
      240,  240,  240, 1005, 1431,  240,  240, 1003,  240,  240,
     1006,  240, 1009, 1002, 1431,  240, 1008, 1076,  240, 1431,

     1007,  240,  240,  240,  240,  240,  240,  240,  240,  240,
     1077,  240,  240,  240,  240,  240, 1431,  240,  240, 1006,
     1010, 1009,  240, 1012,  240, 1008, 1011,  240,  240, 1007,
      240,  240,  240,  240,  240,  240,  240,  240,  240, 1077,
      240,  240,  240, 1078,  240,  240, 1079,  240,  240, 1010,
      240,  240, 1012, 1013, 1431, 1011,  240,  240, 1014,  240,
      240,  240,  240, 1431,  240,  240, 1015,  240,  240,  240,
      240, 1080, 1078,  240,  240, 1079,  240,  240,  240,  240,
     1018, 1016, 1013, 1017,  240,  240,  240, 1014,  240,  240,
      240, 1019, 1020,  240,  240, 1015,  240,  240,  240,  240,

     1080, 1081,  240,  240,  240,  240,  240,  240,  240, 1018,
     1016, 1431, 1017,  240,  240,  240,  240,  240,  240,  240,
     1019, 1020,  240,  240,  240, 1082, 1021,  240,  240, 1025,
     1081,  240,  240,  240,  240,  240,  240,  240,  240, 1022,
      240,  240,  240, 1024,  240,  240, 1083,  240, 1023,  240,
     1431,  240,  240,  240, 1082, 1029,  240,  240, 1025, 1028,
      240,  240,  240, 1084, 1431,  240,  240,  240, 1022,  240,
      240,  240, 1024,  240, 1032, 1083,  240, 1023,  240,  240,
     1026, 1027,  240, 1030, 1029,  240,  240,  240, 1028,  240,
      240,  240, 1084, 1034,  240,  240, 1033, 1431,  240,  240,

     1040,  240,  240, 1032, 1031,  240,  240,  240,  240, 1026,
     1027,  240, 1030,  240, 1035,  240,  240, 1085,  240, 1036,
      240,  240, 1034,  240,  240, 1033,  240,  240,  240, 1040,
      240,  240,  240, 1031,  240,  240,  240, 1037, 1039,  240,
     1038, 1086,  240, 1035,  240, 1041, 1085,  240, 1036,  240,
      240, 1431,  240,  240,  240,  240, 1042, 1043,  240,  240,
      240,  240,  240,  240,  240,  240, 1037, 1039,  240, 1038,
     1086, 1431, 1046,  240, 1041, 1044,  240,  240,  240,  240,
      240,  240,  240,  240,  240, 1042, 1043,  240,  240,  240,
      240,  240, 1045,  240,  240, 1431,  240,  240, 1431,  240,

     1052, 1046,  240, 1047, 1044,  240,  240,  240,  240,  240,
      240,  240, 1048,  240,  240,  240,  240,  240,  240,  240,
     1053, 1045,  240, 1049, 1050,  240,  240, 1051,  240, 1052,
     1054,  240, 1047, 1431,  240,  240,  240, 1055,  240,  240,
      240, 1048,  240,  240,  240,  240,  240,  240,  240, 1053,
      240,  240, 1049, 1050,  240,  240, 1051,  240, 1056, 1054,
     1088, 1431,  240,  240,  240,  240, 1055,  240,  240,  240,
     1089,  240,  240,  240,  240,  240,  240,  240,  240,  240,
     1059, 1058, 1431,  240,  240, 1431,  240, 1056, 1431, 1088,
     1057,  240,  240,  240, 1090,  240,  240,  240,  240, 1089,

      240,  240,  240,  240,  240,  240, 1066,  240,  240, 1059,
     1058, 1060, 1091, 1092, 1063,  240, 1062, 1061,  240, 1057,
      240,  240,  240, 1090,  240,  240,  240,  240,  240,  240,
      240,  240, 1065,  240, 1067, 1066,  240,  240,  240, 1431,
     1060, 1091, 1092, 1063,  240, 1062, 1061,  240, 1064,  240,
      240,  240,  240,  240,  240,  240,  240,  240, 1069,  240,
      240, 1065,  240, 1067,  240,  240,  240,  240, 1068,  240,
     1093, 1094,  240, 1095,  240, 1096, 1070, 1064,  240,  240,
      240,  240,  240,  240,  240,  240,  240, 1069, 1097,  240,
     1099, 1100, 1101,  240, 1102,  240, 1103, 1068,  240, 1093,

     1094,  240, 1095,  240, 1096, 1070, 1104,  240, 1105, 1106,
     1107, 1108, 1109,  240, 1110,  240, 1111, 1097,  240, 1099,
     1100, 1101, 1112, 1102, 1113, 1103, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1104, 1123, 1105, 1106, 1107,
     1108, 1109, 1124, 1110, 1125, 1111, 1126, 1127, 1128, 1129,
     1130, 1112, 1131, 1113, 1132, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1133, 1123, 1134, 1135, 1136, 1137,
     1138, 1124, 1139, 1125, 1140, 1126, 1127, 1128, 1129, 1130,
     1141, 1131, 1142, 1132, 1143, 1144, 1145, 1431,  240, 1431,
      240, 1431,  240, 1133, 1221, 1134, 1135, 1136, 1137, 1138,

      240, 1139, 1148, 1140,  240, 1149, 1147,  240,  240, 1141,
      240, 1142,  240, 1143, 1144, 1145, 1146,  240,  240,  240,
      240,  240,  240, 1221,  240,  240, 1431,  240, 1431,  240,
     1431, 1148,  240,  240, 1149, 1147,  240,  240,  240,  240,
      240,  240, 1150,  240,  240, 1146, 1431,  240,  240,  240,
     1155,  240,  240,  240,  240, 1151,  240, 1152,  240, 1153,
      240,  240, 1431,  240,  240,  240, 1431,  240,  240,  240,
      240, 1150,  240,  240, 1431, 1154, 1431,  240,  240, 1155,
      240,  240, 1156,  240, 1151,  240, 1152,  240, 1153,  240,
     1159, 1158,  240,  240,  240,  240,  240,  240, 1161,  240,

      240,  240,  240,  240, 1154, 1157,  240,  240, 1160,  240,
     1163, 1156,  240, 1166,  240,  240,  240, 1431,  240, 1159,
     1158,  240,  240, 1431,  240,  240,  240, 1161,  240,  240,
      240,  240,  240,  240, 1157,  240, 1167, 1160,  240, 1163,
      240, 1222, 1166, 1223,  240,  240,  240,  240,  240, 1165,
      240,  240, 1162, 1164,  240,  240,  240,  240,  240, 1224,
      240, 1168,  240, 1169,  240, 1167,  240,  240, 1170,  240,
     1222,  240, 1223, 1225,  240,  240,  240,  240, 1165, 1171,
     1431,  240, 1164,  240,  240,  240,  240,  240, 1224,  240,
     1168,  240, 1169,  240,  240,  240,  240, 1170, 1431, 1172,

      240,  240, 1225,  240,  240,  240,  240,  240, 1171, 1175,
      240, 1431, 1431,  240,  240,  240, 1226, 1176, 1173,  240,
      240,  240, 1174,  240,  240,  240, 1177,  240, 1172,  240,
      240, 1431,  240,  240, 1179,  240,  240, 1181, 1175,  240,
      240,  240,  240,  240, 1180, 1226, 1176, 1183,  240,  240,
      240, 1174,  240,  240, 1178, 1177,  240,  240,  240,  240,
      240,  240,  240, 1179,  240, 1431, 1181,  240,  240,  240,
      240,  240,  240, 1180, 1182,  240, 1183,  240,  240,  240,
      240,  240, 1185, 1178,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240, 1184,  240,  240,  240, 1187, 1227,

      240,  240, 1186, 1182,  240,  240,  240,  240,  240,  240,
      240, 1185,  240,  240,  240, 1431,  240, 1228,  240,  240,
     1431,  240,  240, 1184,  240, 1229,  240, 1187, 1227,  240,
      240, 1186,  240, 1188,  240,  240,  240,  240,  240,  240,
     1431,  240,  240,  240, 1189, 1190, 1228,  240,  240,  240,
      240,  240, 1431, 1191, 1229,  240,  240,  240,  240,  240,
     1193,  240, 1188,  240,  240, 1431,  240,  240,  240,  240,
     1192,  240,  240, 1189, 1190,  240,  240,  240,  240,  240,
      240,  240, 1191,  240,  240,  240,  240,  240,  240, 1193,
     1194,  240,  240, 1196,  240,  240, 1197,  240,  240, 1192,

     1195,  240, 1198,  240,  240,  240, 1199, 1200,  240,  240,
      240,  240,  240,  240,  240, 1431, 1431,  240, 1230, 1194,
      240, 1431, 1196,  240,  240, 1197,  240,  240,  240, 1195,
      240, 1198,  240,  240,  240, 1199, 1200,  240, 1201, 1431,
      240, 1203,  240,  240, 1202,  240,  240, 1230,  240, 1431,
     1204,  240, 1431, 1431,  240,  240,  240,  240,  240, 1431,
     1431, 1205,  240,  240, 1431,  240,  240, 1201, 1206,  240,
     1203,  240, 1208, 1202,  240,  240,  240,  240,  240, 1204,
      240, 1207,  240,  240,  240, 1431,  240,  240, 1212,  240,
     1205, 1210, 1231, 1211,  240,  240,  240, 1206,  240, 1209,

      240, 1208,  240,  240,  240,  240,  240,  240,  240,  240,
     1207,  240, 1213,  240, 1214,  240, 1216, 1212,  240,  240,
     1210, 1231, 1211,  240, 1431,  240, 1215,  240, 1209,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240, 1213, 1218, 1214, 1217, 1216,  240,  240,  240, 1232,
      240, 1233,  240, 1219,  240, 1215,  240,  240,  240,  240,
      240, 1234, 1235,  240, 1236,  240,  240, 1237,  240,  240,
     1238, 1218, 1220, 1217,  240,  240,  240,  240, 1232,  240,
     1233, 1239, 1219,  240, 1240, 1241,  240, 1242, 1243,  240,
     1234, 1235, 1244, 1236, 1245,  240, 1237, 1246, 1247, 1238,

     1248, 1220, 1249,  240, 1250, 1251,  240, 1252, 1253, 1254,
     1239, 1255, 1256, 1240, 1241, 1257, 1242, 1243, 1258, 1259,
     1260, 1244, 1261, 1245, 1262, 1263, 1246, 1247, 1431, 1248,
      240, 1249,  240, 1250, 1251,  240, 1252, 1253, 1254, 1431,
     1255, 1256, 1265, 1266, 1257, 1431,  240, 1258, 1259, 1260,
      240, 1261,  240, 1262, 1263,  240,  240,  240, 1431,  240,
     1267,  240,  240,  240,  240, 1264,  240,  240,  240, 1431,
     1431, 1265, 1266, 1307, 1268,  240,  240,  240,  240,  240,
     1308,  240, 1269, 1431,  240,  240,  240,  240,  240, 1267,
      240,  240,  240,  240, 1264,  240,  240,  240,  240, 1272,

      240,  240, 1307, 1268, 1271,  240,  240,  240, 1270, 1308,
      240, 1269,  240,  240,  240, 1273,  240,  240,  240,  240,
      240,  240,  240, 1275, 1431,  240,  240,  240, 1272,  240,
      240, 1274,  240, 1271,  240, 1431,  240, 1270,  240,  240,
     1309,  240,  240,  240, 1273,  240,  240,  240,  240,  240,
      240, 1276, 1275,  240,  240,  240,  240, 1431, 1277,  240,
     1274,  240, 1431,  240,  240,  240,  240,  240,  240, 1309,
     1310, 1431,  240,  240,  240,  240,  240,  240,  240,  240,
     1276, 1278,  240,  240,  240,  240,  240, 1277,  240, 1279,
     1431,  240,  240,  240,  240,  240,  240,  240, 1280, 1310,

     1281,  240,  240,  240,  240,  240,  240,  240,  240, 1431,
     1278,  240,  240,  240,  240,  240,  240,  240, 1279, 1282,
      240,  240, 1431,  240,  240,  240,  240, 1280, 1431, 1281,
     1283,  240,  240,  240,  240,  240,  240,  240, 1285, 1431,
      240,  240,  240,  240, 1311,  240,  240, 1284, 1282,  240,
     1431,  240, 1312,  240,  240,  240, 1287,  240,  240, 1283,
      240,  240,  240,  240, 1286,  240,  240, 1285,  240,  240,
      240,  240,  240, 1311, 1288,  240, 1284,  240,  240,  240,
      240, 1312, 1289,  240, 1313, 1287,  240,  240,  240, 1314,
      240,  240,  240, 1286,  240,  240,  240,  240,  240,  240,

     1291,  240, 1315, 1288,  240, 1431,  240,  240,  240, 1290,
      240, 1289, 1431, 1313,  240,  240,  240,  240, 1314, 1293,
      240,  240, 1292,  240,  240,  240, 1431,  240,  240, 1291,
     1294, 1315,  240,  240,  240,  240,  240, 1295, 1290,  240,
      240, 1296, 1298,  240,  240,  240, 1431,  240, 1293,  240,
     1431, 1292,  240,  240,  240, 1297,  240,  240,  240, 1294,
      240,  240,  240,  240,  240,  240, 1295,  240,  240,  240,
     1296, 1298, 1299,  240, 1431, 1300,  240,  240,  240,  240,
      240,  240,  240,  240, 1297,  240,  240,  240,  240,  240,
     1302, 1301,  240,  240,  240,  240,  240,  240,  240,  240,

     1431, 1299,  240,  240, 1300, 1303,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240, 1302,
     1301,  240,  240,  240,  240, 1304,  240,  240,  240, 1305,
      240,  240,  240,  240, 1303, 1316,  240, 1306, 1317,  240,
      240,  240,  240,  240,  240,  240,  240,  240, 1318, 1319,
      240, 1320,  240, 1322, 1304,  240, 1323, 1324, 1305,  240,
      240, 1325,  240,  240, 1316,  240, 1306, 1317, 1326, 1327,
     1328, 1329,  240, 1330,  240,  240,  240, 1318, 1319,  240,
     1320,  240, 1322, 1355,  240, 1323, 1324,  240,  240, 1431,
     1325, 1332,  240, 1431,  240,  240,  240, 1326, 1327, 1328,

     1329,  240, 1330,  240,  240,  240,  240,  240,  240, 1331,
      240,  240, 1355,  240, 1335,  240,  240,  240, 1333, 1356,
     1332,  240,  240,  240,  240,  240,  240, 1431, 1334,  240,
      240, 1431,  240,  240,  240,  240,  240,  240, 1331,  240,
      240,  240,  240, 1335,  240,  240, 1339, 1333, 1356,  240,
      240,  240,  240,  240, 1336,  240, 1337, 1334,  240,  240,
      240,  240, 1338,  240,  240,  240,  240,  240,  240, 1431,
      240,  240,  240,  240,  240, 1339, 1431, 1340,  240,  240,
      240,  240,  240, 1336,  240, 1337, 1431,  240,  240,  240,
      240, 1338,  240,  240,  240,  240,  240, 1341,  240,  240,

     1357,  240,  240, 1343,  240,  240, 1340, 1431,  240,  240,
      240,  240, 1431,  240, 1431, 1344,  240,  240,  240,  240,
     1342,  240, 1358,  240,  240,  240, 1341,  240,  240, 1357,
      240,  240, 1343,  240,  240, 1345,  240,  240,  240,  240,
      240, 1348,  240,  240, 1344, 1346,  240,  240,  240, 1342,
      240, 1358,  240,  240,  240, 1347,  240, 1349,  240,  240,
      240, 1351,  240,  240, 1431,  240,  240,  240,  240, 1431,
     1348,  240,  240, 1350, 1346,  240,  240,  240, 1359,  240,
      240,  240, 1360, 1352, 1347,  240, 1349,  240, 1354, 1361,
     1351,  240,  240,  240,  240,  240,  240,  240, 1353, 1362,

      240,  240, 1350, 1363,  240,  240, 1364, 1359,  240,  240,
      240, 1360, 1352,  240,  240, 1365, 1366, 1354, 1361, 1367,
     1368, 1369,  240,  240,  240,  240, 1370, 1353, 1362,  240,
      240, 1371, 1363, 1372, 1374, 1364,  240,  240,  240,  240,
     1431, 1395,  240,  240, 1365, 1366,  240, 1431, 1367, 1368,
     1369, 1375,  240,  240, 1376, 1370,  240,  240,  240,  240,
     1371, 1377, 1372, 1374, 1378,  240,  240,  240,  240,  240,
     1395, 1379,  240,  240, 1396,  240,  240,  240, 1380,  240,
     1375,  240,  240, 1376, 1383,  240,  240,  240,  240,  240,
     1377, 1381, 1431, 1378,  240,  240,  240, 1397,  240,  240,

     1379,  240,  240, 1396,  240,  240,  240, 1380,  240,  240,
     1382,  240,  240, 1383,  240,  240, 1388, 1387,  240, 1431,
     1381, 1385, 1384,  240, 1386,  240, 1397, 1389,  240,  240,
     1431,  240,  240,  240,  240,  240,  240, 1390,  240, 1382,
      240,  240,  240,  240,  240, 1388, 1387,  240,  240,  240,
     1385, 1384, 1398, 1386,  240, 1399, 1389,  240,  240, 1392,
      240,  240, 1391,  240,  240,  240, 1390, 1400,  240,  240,
     1401,  240, 1402, 1393, 1394,  240,  240,  240,  240, 1403,
      240, 1398, 1404,  240, 1399,  240,  240,  240, 1392, 1431,
      240, 1391,  240, 1405, 1413,  240, 1400,  240,  240, 1401,

      240, 1402,  240, 1394,  240,  240, 1406,  240, 1403,  240,
      240, 1404,  240,  240,  240, 1431,  240, 1407,  240,  240,
      240,  240, 1405, 1413,  240,  240, 1431, 1431, 1409,  240,
      240,  240,  240,  240,  240, 1406,  240,  240,  240,  240,
      240,  240,  240,  240, 1408,  240, 1407,  240, 1414,  240,
      240,  240,  240, 1431,  240,  240,  240, 1409,  240,  240,
     1415,  240,  240,  240, 1431, 1410,  240,  240, 1411,  240,
      240,  240,  240, 1408,  240,  240,  240, 1414,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240, 1412, 1415,
      240, 1419,  240, 1416, 1410, 1420,  240, 1411,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
     1417,  240,  240,  240, 1418,  240,  240, 1412,  240,  240,
     1419,  240, 1416, 1423, 1420,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240, 1417,
     1425,  240,  240, 1418, 1427,  240,  240,  240,  240, 1429,
      240, 1431, 1423, 1422, 1421,  240,  240,  240,  240, 1424,
      240,  240,  240,  240,  240,  240,  240, 1431,  240, 1425,
      240, 1430,  240, 1427, 1426,  240, 1431,  240, 1429, 1428,
      240, 1431, 1422, 1421,  240,  240,  240, 1431, 1424,  240,
      240, 1431,  240,  240, 1431,  240, 1431,  240, 1431, 1431,

     1430,  240, 1431, 1426, 1431, 1431, 1431, 1431, 1428,  240,
     1431, 1431, 1431,  240, 1431,  240, 1431, 1431, 1431, 1431,
     1431,  240,   56,   56,   56,   56,   56,   56,   58,   58,
       58,   58,   58,   58,   64,   64,   64,   64,   64,   64,
       59,   59,   59,   59,   59,   59,   70,   70,   70,   70,
       70,   70,  112, 1431, 1431,  112,  112,  112,  218,  218,
      218, 1431,  218,  218,  220,  220,  220, 1431,  220,  221,
      221,  221, 1431,  221,  222,  222,  222, 1431,  222,  222,
      224, 1431,  224,  224,  224,  224,  227, 1431,  227,  227,
      227,  227,   17, 1431, 1431, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431
    } ;

static const flex_int16_t yy_chk[5765] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,   19,   19,    6,   20,   20,    7, 1438,   25,
        8,   25,   27,   27,   25,   28,   28,   37,   38,   40,
       41,   52,   54,   40,   37,  126,   51,  127,   51,   52,

       37,   51,   38, 1329,    5,    5, 1249,    6,    6,  905,
        7,    7,  893,    8,    8,  671,   37,   38,   40,   41,
       52,   54,   40,   37,  126,   51,  127,   51,   52,   37,
       51,   38,    5,  626,    5,    6,  470,    6,    7,  417,
        7,    8,  334,    8,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   24,   32,   39,   34,  235,
       35,  234,   34,  227,   39,   39,   34,   73,   73,  120,
       39,   35,   34,   35,  128,   34,   32,  130,   35,   53,
       53,   74,   74,   35,   42,   32,   39,   34,   42,   35,
       24,   34,   42,   39,   39,   34,   44,   78,   42,   39,
       35,   34,   35,  128,   34,   32,  130,   35,   53,   53,
       44,  119,   35,   42,  112,   44,   44,   42,   24,   31,
       31,   42,   31,   81,   81,   44,  109,   42,   31,   43,
       31,   84,   78,   43,   31,   31,   83,   43,   31,   44,

       82,   82,   80,   43,   44,   44,  110,  110,   31,   31,
       79,   31,   79,  117,  117,   79,   76,   31,   43,   31,
       78,  131,   43,   31,   31,   48,   43,   31,   33,   48,
       46,   91,   43,   48,   46,   33,   95,  132,   91,   48,
      133,   46,   33,   75,   91,   33,   33,   46,   33,   71,
      131,   91,  101,   57,   48,   55,   95,   33,   48,   46,
       91,   30,   48,   46,   33,   95,  132,   91,   48,  133,
       46,   33,  101,   91,   33,   33,   46,   33,   36,   92,
       91,  101,  108,   92,  136,   95,   36,  139,  140,   36,
       94,  136,   36,   92,  145,   36,  146,  139,   36,   29,

       94,  101,  108,   92,   94,   26,  147,   36,   92,   21,
       94,  108,   92,  136,   17,   36,  139,  140,   36,   94,
      136,   36,   92,  145,   36,  146,  139,   36,   45,   94,
      106,  108,   92,   94,  106,  147,   45,   12,  106,   94,
       45,   11,   45,   45,   45,   10,  148,    9,  149,  225,
      225,  232,  232,    4,  106,    3,   96,   45,  150,  106,
       96,  141,    0,  106,   96,   45,  141,  106,  152,   45,
       96,   45,   45,   45,   49,  148,   49,  149,  107,   49,
       96,  107,  107,  106,  137,   96,   49,  150,  137,   96,
      141,   49,   49,   96,    0,  141,    0,  152,  107,   96,

        0,    0,    0,   49,    0,   49,    0,  107,   49,   96,
      107,  107,  154,  137,  100,   49,  156,  137,  100,  157,
       49,   49,   50,   50,  129,  100,   50,  107,  142,   50,
       50,  100,  129,  142,  158,  129,   50,  159,  100,   50,
        0,  154,  160,  100,    0,  156,    0,  100,  157,    0,
        0,   50,   50,  129,  100,   50,    0,  142,   50,   50,
      100,  129,  142,  158,  129,   50,  159,  100,   50,   85,
       85,  160,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       86,   86,   86,   86,   97,  162,  134,  134,   97,   86,
      164,   86,   97,  144,  144,   86,   86,  166,   97,   86,
      134,    0,   86,    0,  167,    0,  168,    0,   97,   86,
       86,   86,   86,   97,  162,  134,  134,   97,   86,  164,
       86,   97,  144,  144,   86,   86,  166,   97,   86,  134,
      102,   86,   87,  167,  102,  168,   87,   97,  102,   87,

      161,  151,  153,  161,  102,  155,   87,  151,  153,   87,
       87,  155,   87,    0,  102,  169,   87,    0,  151,  102,
        0,   87,    0,  102,    0,   87,  175,  102,   87,  161,
      151,  153,  161,  102,  155,   87,  151,  153,   87,   87,
      155,   87,  105,  102,  169,   87,   88,  151,  174,  170,
       88,  105,  174,  105,   88,  175,  105,  138,  138,  138,
       88,  170,  105,   88,  171,  176,  138,    0,  177,  171,
       88,  105,    0,  178,  179,   88,    0,  174,  170,   88,
      105,  174,  105,   88,    0,  105,  138,  138,  138,   88,
      170,  105,   88,  171,  176,  138,  143,  177,  171,   88,

       89,  143,  178,  179,   89,  165,  172,  143,  172,  143,
      173,   89,  173,   89,  143,  165,  180,  180,   89,  181,
      165,  165,  182,   89,   89,  143,  184,  185,  186,   89,
      143,  187,  188,   89,  165,  172,  143,  172,  143,  173,
       89,  173,   89,  143,  165,  180,  180,   89,  181,  165,
      165,  182,   89,   89,   90,  184,  185,  186,   90,  189,
      187,  188,   90,  190,  192,   90,  191,  194,   90,  195,
      191,   90,  196,  193,   90,  198,  193,    0,   90,    0,
        0,  199,  200,   90,  193,  201,    0,   90,  189,  193,
      202,   90,  190,  192,   90,  191,  194,   90,  195,  191,

       90,  196,  193,   90,  198,  193,  197,   90,   93,   93,
      199,  200,  203,  193,  201,  197,   93,   93,  193,  202,
      204,  205,   93,  197,  206,  207,  210,  208,   93,    0,
      207,  204,  206,    0,    0,  197,  211,   93,   93,  208,
        0,  203,  214,    0,  197,   93,   93,  216,    0,  204,
      205,   93,  197,  206,  207,  210,  208,   93,   98,  207,
      204,  206,   98,  209,  335,  211,  213,  337,  208,  212,
      209,  214,   98,  209,  215,  212,  216,   98,   98,  213,
      215,    0,   98,    0,    0,  240,  339,   98,    0,  242,
      242,   98,  209,  335,    0,  213,  337,    0,  212,  209,

        0,   98,  209,  215,  212,  240,   98,   98,  213,  215,
      242,   98,   99,   99,  240,  339,  241,  246,  242,  242,
        0,   99,  245,  245,  248,   99,  248,   99,   99,   99,
      246,  241,   99,    0,  240,    0,  241,  246,    0,  242,
        0,   99,   99,  245,  248,  241,  246,  247,  243,  247,
       99,  245,  245,  248,   99,  248,   99,   99,   99,  246,
      241,   99,  103,  243,  103,  241,  246,  103,  243,  247,
      250,  340,  245,  248,  103,  342,  247,  243,  247,  103,
      103,  251,  345,    0,  103,    0,    0,    0,  251,    0,
      250,  103,  243,  103,    0,  251,  103,  243,  247,  250,

      340,  251,    0,  103,  342,  244,    0,    0,  103,  103,
      251,  345,  244,  103,  104,  104,  254,  251,  104,  250,
      244,  104,  104,  244,  251,  244,  254,  346,  104,    0,
      251,  104,    0,    0,  244,  252,  254,    0,  104,  252,
      347,  244,    0,  104,  104,  254,  348,  104,  350,  244,
      104,  104,  244,  255,  244,  254,  346,  104,  256,  252,
      104,  249,  249,  249,  252,  254,  256,  104,  252,  347,
      255,  256,    0,  255,    0,  348,  249,  350,  256,  351,
        0,  249,  255,  259,    0,    0,  257,  256,  252,    0,
      249,  249,  249,  260,  261,  256,  259,  259,    0,  255,

      256,  257,  255,  259,  261,  249,  257,  256,  351,  260,
      249,  253,  259,  260,  261,  257,  353,    0,  253,  253,
      253,  278,  260,  261,    0,  259,  259,  253,    0,  354,
      257,  253,  259,  261,    0,  257,    0,    0,  260,  267,
      253,  278,  260,  261,    0,  353,  267,  253,  253,  253,
      278,  262,  355,  262,    0,    0,  253,  263,  354,  267,
      253,  258,  264,  264,  356,  265,  258,  265,  267,  357,
      278,  263,  258,  262,  258,  267,    0,  263,    0,  258,
      262,  355,  262,  264,  258,  359,  263,  265,  267,  269,
      258,  264,  264,  356,  265,  258,  265,  268,  357,  269,

      263,  258,  262,  258,  268,  266,  263,  266,  258,  269,
      268,  266,  264,  258,  359,    0,  265,  268,  269,    0,
        0,    0,  266,  272,  270,  271,  268,  266,  269,    0,
      272,  270,    0,  268,  266,  271,  266,  270,  269,  268,
      266,  273,    0,  272,  270,  271,  268,  274,  275,  277,
      273,  266,  272,  270,  271,    0,  266,  274,  275,  272,
      270,  273,    0,    0,  271,  277,  270,  274,  275,  277,
      273,  276,  272,  270,  271,  281,  274,  275,  277,  273,
        0,  279,  360,  363,  281,  276,  274,  275,  276,  282,
      273,  276,  279,  282,  277,  281,  274,  275,  277,  284,

      276,  279,    0,    0,  281,  283,    0,  352,    0,  282,
      279,  360,  363,  281,  276,  283,  352,  276,  282,  284,
      276,  279,  282,    0,  281,  283,    0,    0,  284,    0,
      279,  280,  280,  364,  283,  285,  352,  285,  282,  366,
        0,  280,    0,  290,  283,  352,  280,  280,  284,  285,
        0,  367,  280,  286,  283,  285,  290,  286,  286,  287,
      280,  280,  364,  290,  285,  287,  285,  287,  366,  288,
      280,  288,  290,  288,    0,  280,  280,  286,  285,  287,
      367,  280,  286,    0,  285,  290,  286,  286,  287,  368,
      289,  369,  290,  288,  287,  291,  287,    0,  288,    0,

      288,  293,  288,  292,  291,  289,  286,    0,  287,  289,
      289,  294,  292,  370,    0,  291,  293,    0,  368,  289,
      369,  293,  288,  292,  291,    0,  294,    0,  296,  298,
      293,  294,  292,  291,  289,  296,  297,  297,  289,  289,
      294,  292,  370,  295,  291,  293,  295,  295,  296,  298,
      293,  302,  292,  299,  299,  294,  297,  296,  298,  300,
      294,  371,  300,  295,  296,  297,  297,  320,    0,  301,
        0,  302,  295,  303,  299,  295,  295,  296,  298,  300,
      302,  304,  299,  299,  301,  297,  303,  320,  300,  301,
      371,  300,  295,  303,  304,  305,  320,  307,  301,  305,

      302,  304,  303,  299,    0,  306,  307,    0,  300,  306,
      304,    0,  309,  301,  309,  303,  320,  307,  301,  305,
      329,    0,  303,  304,  305,  306,  307,  310,  305,    0,
      304,    0,  309,  311,  306,  307,  311,    0,  306,  372,
      329,  309,    0,  309,    0,  310,  307,  310,  305,  329,
      312,    0,  312,  311,  306,  308,  310,  308,  308,  312,
      313,  309,  311,  315,    0,  311,  308,  312,  372,  329,
      313,  308,  312,  315,  310,    0,  310,  308,  314,  312,
      313,  312,  311,  315,  308,  316,  308,  308,  312,  313,
        0,  314,  315,  316,  317,  308,  312,  317,  314,  313,

      308,  312,  315,    0,  318,  316,  308,  314,  321,  313,
      319,  318,  315,  373,  316,  323,  321,  317,  319,  323,
      314,    0,  316,  317,  318,  375,  317,  314,  321,  319,
      319,  323,  322,  318,  316,  323,    0,  321,  322,  319,
      318,    0,  373,  322,  323,  321,  317,  319,  323,  377,
      325,  325,  322,  318,  375,  327,    0,  321,  319,  319,
      323,  322,  327,  324,  323,  326,  324,  322,  327,  326,
      324,  325,  322,  324,    0,  327,  328,    0,  377,  325,
      325,  322,    0,  376,  327,  326,  324,    0,  378,  328,
      376,  327,  324,  379,  326,  324,  328,  327,  326,  324,

      325,  330,  324,  331,  327,  328,  349,  331,  349,  361,
      330,  365,  376,  361,  326,  324,  330,  378,  328,  376,
      381,  330,  379,  349,  382,  328,  365,  331,  380,  383,
      330,  384,  331,  385,  386,  349,  331,  349,  361,  330,
      365,  387,  361,  380,  388,  330,  389,  390,  391,  381,
      330,  392,  349,  382,  393,  365,  331,  380,  383,  394,
      384,  395,  385,  386,  396,  398,  399,  400,  397,  403,
      387,  404,  380,  388,  405,  389,  390,  391,  397,  406,
      392,  407,  408,  393,  409,  410,  412,  413,  394,  414,
      395,  415,  416,  396,  398,  399,  400,  397,  403,  418,

      404,  419,  420,  405,  421,  422,  423,  397,  406,  424,
      407,  408,  426,  409,  410,  412,  413,  425,  414,  427,
      415,  416,  428,  429,  431,  430,  432,  433,  418,  430,
      419,  420,  434,  421,  422,  423,  425,  435,  424,  436,
      437,  426,  438,  439,  441,  442,  425,  443,  427,  436,
      445,  428,  429,  431,  430,  432,  433,  447,  430,  448,
      449,  434,  450,  451,  452,  425,  435,  454,  436,  437,
      455,  438,  439,  441,  442,  456,  443,  458,  457,  445,
      457,  459,  460,  461,  462,  463,  447,  464,  448,  449,
      465,  450,  451,  452,  465,  466,  454,  467,  468,  455,

      472,  471,  473,    0,  456,  471,  458,  457,  474,  457,
      459,  460,  461,  462,  463,  475,  464,  605,  477,  465,
      472,  471,  473,  465,  466,  479,  467,  468,  474,  472,
      471,  473,  476,  480,  471,  475,  476,  474,  477,  478,
        0,    0,    0,  478,  475,  479,  605,  477,    0,  472,
      471,  473,  606,  480,  479,  483,  476,  474,  487,  481,
      487,  476,  480,  478,  475,  476,  482,  477,  478,  481,
      482,  484,  478,  483,  479,  483,  607,  486,  484,  481,
      487,  606,  480,  608,  483,  476,  482,  487,  481,  487,
      486,  484,  478,  609,  485,  482,  485,  486,  481,  482,

      484,    0,  483,    0,  483,  607,  486,  484,  481,  487,
      610,  485,  608,  490,  488,  482,  485,  494,  491,  486,
      484,  488,  609,  485,  489,  485,  486,  491,  490,  495,
      488,  492,  489,  490,  488,  492,    0,  494,  491,  610,
      485,    0,  490,  488,  489,  485,  494,  491,    0,  495,
      488,  493,    0,  489,  498,  492,  491,  490,  495,  488,
      492,  489,  490,  488,  492,  493,  494,  491,  496,  611,
      499,  493,  497,  489,  498,  504,  497,  499,  495,    0,
      493,  496,    0,  498,  492,  500,    0,  501,  496,  500,
      499,    0,  612,    0,  493,  504,  497,  496,  611,  499,

      493,  497,  501,  498,  504,  497,  499,  501,  502,  500,
      496,  503,  505,  503,  500,  507,  501,  496,  500,  499,
      506,  612,  502,  506,  504,  497,  507,  505,  502,  614,
      509,  501,  505,  503,  510,  507,  501,  502,  500,  618,
      503,  505,  503,  506,  507,  508,  619,  620,  508,  506,
      509,  502,  506,  512,  510,  507,  505,  502,  614,  509,
      512,  505,  503,  510,  507,  508,  511,  513,  618,    0,
      511,  514,  506,  512,  508,  619,  620,  508,  515,  509,
      621,  513,  512,  510,  514,  622,  516,  513,    0,  512,
      511,  514,  515,  623,  508,  511,  513,  517,  515,  511,

      514,  516,  512,  520,  518,  519,  516,  515,  518,  621,
      513,  517,  519,  514,  622,  516,  513,  517,  523,  511,
      514,  515,  623,  520,    0,  519,  517,  515,  518,  522,
      516,  521,  520,  518,  519,  516,  522,  518,  523,  521,
      517,  519,  526,  525,    0,  526,  517,  523,    0,  522,
      524,  521,  520,  524,  519,  530,  528,  518,  522,  525,
      521,  531,  526,  525,    0,  522,  527,  523,  521,  528,
      527,  526,  525,  524,  526,  530,  528,  529,  522,  524,
      521,  531,  524,  532,  530,  528,  527,  529,  525,  624,
      531,  526,  525,  534,    0,  527,  625,  529,  528,  527,

      537,  533,  524,  532,  530,  528,  529,  538,  535,  534,
      531,  533,  532,  534,  536,  527,  529,  535,  624,  627,
      537,  533,  534,  536,  539,  625,  529,  538,  535,  537,
      533,    0,  532,    0,  536,  628,  538,  535,  534,  539,
      533,  542,  534,  536,  539,  541,  535,  543,  627,  537,
      533,  543,  536,  539,  540,  540,  538,  535,  544,  544,
      541,  542,  545,  536,  628,  541,  545,  543,  539,    0,
      542,    0,  547,  539,  541,  540,  543,  630,  631,  544,
      543,  632,  552,  540,  540,  552,  545,  544,  544,  541,
      542,  545,  547,  549,  541,  545,  543,  546,  548,  546,

      548,  547,  552,    0,  540,  550,  630,  631,  544,  549,
      632,  552,    0,  549,  552,  545,  551,  553,  548,  546,
      550,  547,  549,  554,    0,  550,  546,  548,  546,  548,
      554,  552,  551,  555,  550,    0,  551,  553,  549,  633,
      555,  553,  549,  554,  556,  551,  553,  548,  546,  550,
      557,  558,  554,  555,  550,  559,  634,    0,  556,  554,
        0,  551,  555,  560,  556,  551,  553,    0,  633,  555,
      557,  558,  554,  556,  635,  559,  560,  561,  636,  557,
      558,  561,  555,  560,  559,  634,  562,  556,  562,  563,
        0,    0,  560,  556,  565,    0,  561,    0,  563,  557,

      558,  561,  565,  635,  559,  560,  561,  636,  562,  563,
      561,  564,  560,  564,  565,  562,  568,  562,  563,  567,
      569,    0,    0,  565,  569,  561,  566,  563,  566,    0,
      561,  565,  566,  564,  573,  567,  568,  562,  563,  567,
      564,    0,  564,  565,  569,  568,  566,  571,  567,  569,
      571,  570,  637,  569,  573,  566,    0,  566,  572,  638,
        0,  566,  564,  573,  567,  568,  570,  571,  567,  575,
      576,  570,  572,  569,  574,  566,  571,    0,  572,  571,
      570,  637,  572,  573,  574,  580,  577,  572,  638,  575,
      576,  582,    0,    0,  574,  570,  571,  578,  575,  576,

      570,  572,  581,  574,  577,  580,  577,  572,  579,  581,
      584,  582,  578,  574,  580,  577,  583,  578,  575,  576,
      582,  579,  581,  574,  642,  584,  578,  583,  579,    0,
      584,  581,  643,  577,  580,  577,  583,  579,  581,  584,
      582,  578,  587,  585,  586,  583,  578,  588,  589,    0,
      579,  581,  585,  642,  584,  591,  583,  579,  586,  584,
        0,  643,  587,  585,  586,  583,    0,  588,  589,    0,
        0,  587,  585,  586,  596,  591,  588,  589,  590,  592,
      590,  585,  595,  596,  591,  594,  595,  586,    0,  592,
      593,  587,  585,  586,  596,  594,  588,  589,  590,  592,

      593,  597,  593,  596,  591,  594,  595,  590,  592,  590,
      593,  595,  596,    0,  594,  595,    0,  597,  592,  593,
      598,  597,  598,  596,  594,  599,    0,  590,  592,  593,
      597,  593,  600,    0,  594,  595,  644,  602,  602,  593,
      645,  646,  598,  599,  601,  599,  597,  600,  647,  598,
      597,  598,  600,  601,  599,  604,  649,  601,  602,  603,
      650,  600,  603,  651,  601,  644,  602,  602,  604,  645,
      646,  598,  599,  601,  599,  604,  600,  647,  652,  603,
      653,  600,  601,  656,  604,  649,  601,  602,  603,  650,
      657,  603,  651,  601,  658,  660,  662,  604,  663,  664,

      665,  668,  666,  675,  604,  677,  678,  652,  603,  653,
      679,  681,  656,  666,  680,  680,  682,  683,  684,  657,
      685,  686,  687,  658,  660,  662,  688,  663,  664,  665,
      668,  666,  675,  689,  677,  678,  690,  692,  693,  679,
      681,  694,  666,  680,  680,  682,  683,  684,  696,  685,
      686,  687,  697,  698,  700,  688,  701,  702,  703,  704,
      706,  707,  689,  708,  709,  690,  692,  693,  711,  712,
      694,  713,  714,  718,  719,  720,  722,  696,  723,  724,
      725,  697,  698,  700,  726,  701,  702,  703,  704,  706,
      707,  727,  708,  709,  728,  729,  731,  711,  712,  733,

      713,  714,  718,  719,  720,  722,  734,  723,  724,  725,
      740,  737,  741,  726,  738,    0,  739,    0,  744,    0,
      727,  737,  745,  728,  729,  731,  869,  738,  733,  739,
      740,  737,  741,  742,  738,  734,  739,    0,  744,  740,
      737,  741,  745,  738,  747,  739,  742,  744,  743,  748,
      737,  745,  749,  742,    0,  869,  738,  743,  739,  740,
      737,  741,  742,  738,  747,  739,  746,  744,  743,  748,
      746,  745,  749,  747,  750,  742,  752,  743,  748,    0,
      750,  749,  742,  751,  752,    0,  743,  751,  753,    0,
      746,  754,  753,  747,  750,  746,  752,  743,  748,  746,

        0,  749,  758,  750,  754,  752,    0,  751,  753,  750,
        0,  754,  751,  752,  755,  756,  751,  753,  757,  746,
      754,  753,  758,  750,    0,  752,  758,    0,  759,  755,
      756,  758,  757,  754,  755,  756,  751,  753,  757,  760,
      754,    0,  760,  755,  756,  761,  762,  757,  759,    0,
        0,  758,  872,  762,    0,    0,  763,  759,  755,  756,
        0,  757,  760,  755,  756,  761,  762,  757,  760,  764,
      766,  760,  763,  767,  761,  762,  763,  759,  768,  765,
      768,  872,  762,  765,  764,  763,  767,    0,    0,  764,
      766,  760,  874,  767,  761,  762,  771,    0,  764,  766,

      768,  763,  767,  765,  770,  763,  769,  768,  765,  768,
      769,  770,  765,  764,  772,  767,  771,  773,  764,  766,
        0,  874,  767,    0,  770,  771,  769,  774,  776,  768,
      775,  779,  765,  770,  772,  769,  876,  773,  774,  769,
      770,  775,  877,  772,  776,  771,  773,  774,  776,  777,
      775,  779,  780,  770,  781,  769,  774,  776,  778,  775,
      779,    0,  778,  772,  777,  876,  773,  774,  879,  777,
      775,  877,  780,  776,  781,  782,  774,  776,  777,  775,
      779,  780,  778,  781,    0,  783,  784,  778,  785,  786,
      782,  778,  785,  777,    0,  782,  784,  879,  777,    0,

      783,  780,  787,  781,  782,  783,  784,  788,  785,  786,
      880,  778,  790,  791,  783,  784,    0,  785,  786,  782,
      788,  785,  787,  790,  782,  784,  789,  788,  793,  783,
      789,  787,  790,  791,  783,  784,  788,  785,  786,  880,
      799,  790,  791,  881,  792,  794,  882,  795,  793,  788,
      789,  787,  790,  792,    0,  789,  788,  793,  794,  789,
      799,  790,  791,    0,  792,  794,  795,  795,  796,  799,
      797,  884,  881,  792,  794,  882,  795,  793,  798,  789,
      798,  796,  792,  797,  801,  800,  802,  794,  796,  799,
      797,  798,  800,  792,  794,  795,  795,  796,  798,  797,

      884,  886,  803,  804,  801,  800,  802,  798,  805,  798,
      796,    0,  797,  801,  800,  802,  806,  796,  808,  797,
      798,  800,  803,  804,  807,  887,  803,  798,  805,  811,
      886,  803,  804,  801,  800,  802,  806,  805,  808,  807,
      810,  809,  814,  810,  807,  806,  888,  808,  809,  811,
        0,  803,  804,  807,  887,  814,  813,  805,  811,  813,
      810,  809,  814,  889,    0,  806,  812,  808,  807,  810,
      809,  814,  810,  807,  817,  888,  813,  809,  811,  815,
      812,  812,  818,  815,  814,  813,  812,  816,  813,  810,
      809,  814,  889,  819,  817,  812,  818,    0,  823,  815,

      826,  820,  818,  817,  816,  813,  821,  816,  815,  812,
      812,  818,  815,  819,  820,  812,  816,  890,  823,  821,
      826,  820,  819,  817,  822,  818,  821,  823,  815,  826,
      820,  818,  824,  816,  825,  821,  816,  822,  825,  827,
      824,  891,  819,  820,  822,  828,  890,  823,  821,  826,
      820,    0,  824,  822,  825,  821,  829,  830,  831,  827,
      829,  824,  832,  825,  834,  828,  822,  825,  827,  824,
      891,    0,  834,  822,  828,  832,  837,  830,  831,  833,
      829,  824,  832,  825,  834,  829,  830,  831,  827,  829,
      835,  832,  833,  834,  828,    0,  837,  836,    0,  833,

      841,  834,  841,  835,  832,  837,  830,  831,  833,  829,
      835,  832,  836,  834,  838,  842,  839,  836,  840,  835,
      843,  833,  841,  838,  839,  837,  836,  840,  833,  841,
      844,  841,  835,    0,  838,  842,  839,  845,  840,  835,
      843,  836,  847,  838,  842,  839,  836,  840,  846,  843,
      844,  841,  838,  839,  848,  849,  840,  845,  846,  844,
      894,    0,  847,  838,  842,  839,  845,  840,  846,  843,
      895,  847,  851,  853,  848,  849,  850,  846,  852,  844,
      852,  851,    0,  848,  849,    0,  845,  846,    0,  894,
      850,  847,  851,  853,  896,  854,  850,  846,  852,  895,

      856,  851,  853,  848,  849,  850,  860,  852,  855,  852,
      851,  854,  897,  898,  857,  854,  856,  855,  857,  850,
      856,  851,  853,  896,  854,  850,  860,  852,  855,  856,
      859,  861,  859,  858,  861,  860,  862,  855,  857,    0,
      854,  897,  898,  857,  854,  856,  855,  857,  858,  856,
      859,  861,  863,  858,  864,  860,  862,  855,  865,  859,
      861,  859,  858,  861,  867,  862,  866,  857,  863,  868,
      899,  900,  863,  901,  864,  902,  866,  858,  865,  859,
      861,  863,  858,  864,  867,  862,  866,  865,  904,  868,
      907,  908,  909,  867,  910,  866,  911,  863,  868,  899,

      900,  863,  901,  864,  902,  866,  912,  865,  913,  914,
      916,  917,  918,  867,  919,  866,  920,  904,  868,  907,
      908,  909,  926,  910,  928,  911,  929,  930,  933,  935,
      937,  938,  939,  940,  941,  912,  943,  913,  914,  916,
      917,  918,  944,  919,  945,  920,  946,  948,  949,  950,
      951,  926,  952,  928,  953,  929,  930,  933,  935,  937,
      938,  939,  940,  941,  954,  943,  955,  956,  957,  958,
      959,  944,  961,  945,  962,  946,  948,  949,  950,  951,
      963,  952,  965,  953,  966,  967,  969,    0,  971,    0,
      972,    0,  973,  954, 1074,  955,  956,  957,  958,  959,

      974,  961,  975,  962,  976,  977,  973,  970,  971,  963,
      972,  965,  973,  966,  967,  969,  970,  971,  979,  972,
      974,  973,  975, 1074,  976,  977,    0,  970,    0,  974,
        0,  975,  984,  976,  977,  973,  970,  971,  979,  972,
      980,  973,  978,  978,  982,  970,    0,  979,  981,  974,
      985,  975,  984,  976,  977,  980,  970,  981,  986,  982,
      980,  984,    0,  978,  982,  983,    0,  979,  981,  980,
      985,  978,  978,  982,    0,  983,    0,  981,  986,  985,
      990,  984,  987,  987,  980,  983,  981,  986,  982,  980,
      990,  989,  978,  982,  983,  989,  988,  981,  992,  985,

      990,  991,  993,  987,  983,  988,  995,  986,  991,  990,
      995,  987,  987,  998,  983,  989,  988,    0,  992,  990,
      989,  991,  993,    0,  989,  988,  995,  992,  994,  990,
      991,  993,  987,  998,  988,  995,  999,  991,  996,  995,
      997, 1075,  998, 1076,  989,  988, 1000,  992,  994,  997,
      991,  993,  994,  996, 1002,  995,  999,  994,  996, 1077,
      997, 1000,  998, 1001, 1001,  999, 1000,  996, 1002,  997,
     1075, 1004, 1076, 1079, 1002, 1000, 1007,  994,  997, 1003,
        0, 1003,  996, 1002, 1001,  999, 1005,  996, 1077,  997,
     1000, 1004, 1001, 1001, 1006, 1000, 1007, 1002,    0, 1005,

     1004, 1003, 1079, 1002, 1008, 1007, 1005, 1009, 1003, 1009,
     1003,    0,    0, 1001, 1006, 1005, 1081, 1010, 1006, 1011,
     1004, 1010, 1008, 1006, 1008, 1007, 1011, 1009, 1005, 1014,
     1003,    0, 1013, 1008, 1013, 1005, 1009, 1015, 1009, 1011,
     1012, 1010, 1016, 1006, 1014, 1081, 1010, 1018, 1011, 1014,
     1010, 1008, 1013, 1008, 1012, 1011, 1009, 1015, 1014, 1017,
     1012, 1013, 1016, 1013, 1022,    0, 1015, 1018, 1011, 1012,
     1010, 1016, 1023, 1014, 1017, 1020, 1018, 1024, 1014, 1017,
     1019, 1013, 1020, 1012, 1022, 1021, 1015, 1025, 1017, 1012,
     1026, 1016, 1023, 1022, 1019, 1020, 1018, 1024, 1027, 1082,

     1019, 1023, 1021, 1017, 1020, 1021, 1024, 1025, 1017, 1019,
     1026, 1020, 1028, 1022, 1021,    0, 1025, 1083, 1027, 1026,
        0, 1023, 1032, 1019, 1020, 1084, 1024, 1027, 1082, 1019,
     1033, 1021, 1028, 1029, 1021, 1030, 1025, 1029, 1034, 1026,
        0, 1028, 1032, 1035, 1030, 1031, 1083, 1027, 1037, 1031,
     1033, 1032,    0, 1034, 1084, 1030, 1036, 1029, 1034, 1033,
     1038, 1028, 1029, 1035, 1030,    0, 1029, 1034, 1037, 1031,
     1036, 1032, 1035, 1030, 1031, 1039, 1036, 1037, 1031, 1033,
     1038, 1043, 1034, 1042, 1030, 1036, 1029, 1034, 1044, 1038,
     1039, 1040, 1035, 1041, 1041, 1039, 1042, 1037, 1031, 1036,

     1040, 1043, 1044, 1042, 1039, 1036, 1045, 1046, 1044, 1038,
     1043, 1040, 1042, 1048, 1041,    0,    0, 1044, 1085, 1039,
     1040,    0, 1041, 1041, 1039, 1042, 1045, 1046, 1049, 1040,
     1043, 1044, 1042, 1048, 1047, 1045, 1046, 1044, 1047,    0,
     1040, 1050, 1048, 1041, 1049, 1050, 1052, 1085, 1049,    0,
     1051, 1051,    0,    0, 1047, 1045, 1046, 1049, 1055,    0,
        0, 1052, 1048, 1047,    0, 1050, 1052, 1047, 1053, 1053,
     1050, 1051, 1055, 1049, 1050, 1052, 1057, 1049, 1055, 1051,
     1051, 1054, 1054, 1047, 1058,    0, 1056, 1055, 1059, 1053,
     1052, 1057, 1087, 1058, 1050, 1052, 1057, 1053, 1053, 1056,

     1051, 1055, 1054, 1060, 1058, 1057, 1056, 1055, 1059, 1061,
     1054, 1054, 1060, 1058, 1062, 1056, 1064, 1059, 1053, 1065,
     1057, 1087, 1058, 1060,    0, 1057, 1063, 1063, 1056, 1061,
     1066, 1054, 1060, 1058, 1062, 1056, 1064, 1059, 1061, 1065,
     1069, 1060, 1067, 1062, 1066, 1064, 1067, 1063, 1065, 1088,
     1066, 1090, 1060, 1068, 1070, 1063, 1063, 1068, 1061, 1066,
     1069, 1094, 1096, 1062, 1098, 1064, 1067, 1099, 1065, 1069,
     1100, 1067, 1070, 1066, 1070, 1067, 1063, 1068, 1088, 1066,
     1090, 1101, 1068, 1070, 1106, 1108, 1068, 1109, 1111, 1069,
     1094, 1096, 1113, 1098, 1114, 1067, 1099, 1115, 1118, 1100,

     1119, 1070, 1120, 1070, 1121, 1122, 1068, 1123, 1124, 1126,
     1101, 1127, 1128, 1106, 1108, 1134, 1109, 1111, 1135, 1136,
     1137, 1113, 1138, 1114, 1143, 1144, 1115, 1118,    0, 1119,
     1146, 1120, 1147, 1121, 1122, 1148, 1123, 1124, 1126,    0,
     1127, 1128, 1150, 1151, 1134,    0, 1152, 1135, 1136, 1137,
     1146, 1138, 1147, 1143, 1144, 1148, 1149, 1153,    0, 1146,
     1152, 1147, 1150, 1151, 1148, 1149, 1152, 1154, 1155,    0,
        0, 1150, 1151, 1226, 1154, 1152, 1149, 1153, 1156, 1146,
     1228, 1147, 1156,    0, 1148, 1149, 1153, 1154, 1155, 1152,
     1158, 1150, 1151, 1157, 1149, 1152, 1154, 1155, 1156, 1159,

     1160, 1159, 1226, 1154, 1158, 1149, 1153, 1156, 1157, 1228,
     1158, 1156, 1161, 1157, 1164, 1160, 1154, 1155, 1162, 1158,
     1160, 1159, 1157, 1163,    0, 1166, 1163, 1156, 1159, 1160,
     1159, 1162, 1161, 1158, 1164,    0, 1167, 1157, 1162, 1158,
     1229, 1161, 1157, 1164, 1160, 1166, 1163, 1162, 1168, 1160,
     1159, 1165, 1163, 1165, 1166, 1163, 1167,    0, 1169, 1170,
     1162, 1161,    0, 1164, 1172, 1167, 1171, 1162, 1168, 1229,
     1231,    0, 1173, 1165, 1166, 1163, 1177, 1168, 1169, 1170,
     1165, 1171, 1165, 1178, 1172, 1167, 1171, 1169, 1170, 1173,
        0, 1175, 1173, 1172, 1174, 1171, 1177, 1168, 1174, 1231,

     1175, 1173, 1165, 1178, 1176, 1177, 1179, 1169, 1170,    0,
     1171, 1175, 1178, 1172, 1174, 1171, 1180, 1182, 1173, 1176,
     1175, 1173,    0, 1174, 1176, 1177, 1179, 1174,    0, 1175,
     1181, 1181, 1178, 1176, 1183, 1179, 1180, 1182, 1184,    0,
     1175, 1185, 1187, 1174, 1232, 1180, 1182, 1183, 1176, 1188,
        0, 1181, 1233, 1176, 1183, 1179, 1188, 1191, 1184, 1181,
     1181, 1185, 1187, 1183, 1186, 1180, 1182, 1184, 1186, 1188,
     1185, 1187, 1189, 1232, 1189, 1190, 1183, 1191, 1188, 1192,
     1181, 1233, 1190, 1183, 1236, 1188, 1191, 1184, 1186, 1237,
     1185, 1187, 1189, 1186, 1193, 1190, 1194, 1186, 1188, 1192,

     1194, 1189, 1239, 1189, 1190,    0, 1191, 1195, 1192, 1193,
     1197, 1190,    0, 1236, 1193, 1196, 1194, 1186, 1237, 1196,
     1200, 1189, 1195, 1193, 1190, 1194,    0, 1195, 1192, 1194,
     1197, 1239, 1199, 1198, 1202, 1196, 1195, 1198, 1193, 1197,
     1200, 1199, 1202, 1193, 1196, 1194,    0, 1204, 1196, 1200,
        0, 1195, 1199, 1198, 1202, 1201, 1195, 1201, 1203, 1197,
     1205, 1199, 1198, 1202, 1196, 1206, 1198, 1204, 1207, 1200,
     1199, 1202, 1203, 1208,    0, 1209, 1204, 1201, 1203, 1209,
     1205, 1199, 1198, 1202, 1201, 1206, 1201, 1203, 1207, 1205,
     1211, 1210, 1212, 1208, 1206, 1210, 1204, 1207, 1214, 1209,

        0, 1203, 1208, 1215, 1209, 1212, 1201, 1203, 1209, 1205,
     1211, 1216, 1212, 1217, 1206, 1210, 1218, 1207, 1214, 1211,
     1210, 1212, 1208, 1215, 1210, 1213, 1213, 1214, 1209, 1218,
     1219, 1216, 1215, 1217, 1212, 1242, 1218, 1219, 1243, 1211,
     1216, 1212, 1217, 1220, 1210, 1218, 1213, 1214, 1246, 1247,
     1219, 1248, 1215, 1250, 1213, 1213, 1252, 1253, 1218, 1219,
     1216, 1254, 1217, 1220, 1242, 1218, 1219, 1243, 1255, 1257,
     1258, 1259, 1220, 1261, 1264, 1213, 1265, 1246, 1247, 1219,
     1248, 1266, 1250, 1307, 1267, 1252, 1253, 1268, 1270,    0,
     1254, 1271, 1220,    0, 1264, 1269, 1265, 1255, 1257, 1258,

     1259, 1266, 1261, 1264, 1267, 1265, 1273, 1268, 1270, 1269,
     1266, 1271, 1307, 1267, 1275, 1269, 1268, 1270, 1272, 1309,
     1271, 1277, 1272, 1264, 1269, 1265, 1273,    0, 1274, 1278,
     1266,    0, 1274, 1267, 1275, 1273, 1268, 1270, 1269, 1276,
     1271, 1277, 1272, 1275, 1269, 1281, 1282, 1272, 1309, 1278,
     1277, 1272, 1274, 1280, 1276, 1273, 1279, 1274, 1278, 1276,
     1279, 1274, 1280, 1275, 1283, 1281, 1282, 1284, 1276,    0,
     1277, 1272, 1287, 1280, 1281, 1282,    0, 1285, 1278, 1285,
     1279, 1274, 1280, 1276, 1283, 1279,    0, 1284, 1276, 1279,
     1286, 1280, 1287, 1283, 1281, 1282, 1284, 1286, 1288, 1285,

     1310, 1287, 1280, 1290, 1289, 1291, 1285,    0, 1285, 1279,
     1286, 1292,    0, 1283,    0, 1291, 1284, 1294, 1288, 1286,
     1289, 1287, 1313, 1290, 1289, 1291, 1286, 1288, 1285, 1310,
     1299, 1292, 1290, 1289, 1291, 1292, 1293, 1294, 1295, 1286,
     1292, 1296, 1297, 1296, 1291, 1293, 1294, 1288, 1300, 1289,
     1299, 1313, 1290, 1289, 1291, 1295, 1293, 1297, 1295, 1299,
     1292, 1300, 1297, 1296,    0, 1293, 1294, 1295, 1300,    0,
     1296, 1297, 1296, 1298, 1293, 1301, 1298, 1300, 1314, 1299,
     1302, 1303, 1315, 1301, 1295, 1293, 1297, 1295, 1304, 1316,
     1300, 1297, 1296, 1305, 1306, 1301, 1298, 1300, 1302, 1317,

     1302, 1303, 1298, 1318, 1301, 1298, 1319, 1314, 1304, 1302,
     1303, 1315, 1301, 1305, 1306, 1320, 1321, 1304, 1316, 1322,
     1323, 1324, 1305, 1306, 1301, 1298, 1326, 1302, 1317, 1302,
     1303, 1327, 1318, 1328, 1330, 1319, 1331, 1304, 1332, 1333,
        0, 1356, 1305, 1306, 1320, 1321, 1335,    0, 1322, 1323,
     1324, 1331, 1334, 1336, 1333, 1326, 1331, 1337, 1332, 1333,
     1327, 1334, 1328, 1330, 1337, 1331, 1335, 1332, 1333, 1338,
     1356, 1338, 1334, 1336, 1357, 1335, 1340, 1337, 1339, 1339,
     1331, 1334, 1336, 1333, 1342, 1331, 1337, 1332, 1333, 1338,
     1334, 1340,    0, 1337, 1341, 1335, 1340, 1358, 1338, 1339,

     1338, 1334, 1336, 1357, 1342, 1340, 1337, 1339, 1339, 1343,
     1341, 1345, 1344, 1342, 1341, 1346, 1347, 1346, 1338,    0,
     1340, 1344, 1343, 1341, 1345, 1340, 1358, 1348, 1339, 1343,
        0, 1345, 1344, 1342, 1349, 1346, 1347, 1350, 1343, 1341,
     1345, 1344, 1351, 1341, 1346, 1347, 1346, 1348, 1352, 1353,
     1344, 1343, 1362, 1345, 1349, 1364, 1348, 1350, 1343, 1352,
     1345, 1344, 1351, 1349, 1346, 1347, 1350, 1366, 1352, 1353,
     1369, 1351, 1370, 1353, 1354, 1354, 1348, 1352, 1353, 1373,
     1375, 1362, 1376, 1349, 1364, 1379, 1350, 1377, 1352,    0,
     1378, 1351, 1380, 1377, 1397, 1354, 1366, 1352, 1353, 1369,

     1375, 1370, 1376, 1354, 1354, 1379, 1378, 1377, 1373, 1375,
     1378, 1376, 1380, 1381, 1379,    0, 1377, 1382, 1383, 1378,
     1385, 1380, 1377, 1397, 1354, 1387,    0,    0, 1386, 1375,
     1384, 1376, 1386, 1381, 1379, 1378, 1377, 1382, 1383, 1378,
     1385, 1380, 1381, 1388, 1384, 1387, 1382, 1383, 1400, 1385,
     1384, 1389, 1386,    0, 1387, 1390, 1391, 1386, 1392, 1384,
     1403, 1386, 1381, 1388,    0, 1389, 1382, 1383, 1390, 1385,
     1394, 1389, 1388, 1384, 1387, 1390, 1391, 1400, 1392, 1384,
     1389, 1386, 1393, 1404, 1390, 1391, 1405, 1392, 1393, 1403,
     1394, 1414, 1388, 1406, 1389, 1415, 1407, 1390, 1408, 1394,

     1389, 1409, 1393, 1404, 1390, 1391, 1405, 1392, 1410, 1411,
     1409, 1393, 1404, 1406, 1412, 1405, 1407, 1393, 1408, 1394,
     1414, 1409, 1406, 1420, 1415, 1407, 1416, 1408, 1410, 1411,
     1409, 1393, 1404, 1418, 1412, 1405, 1421, 1410, 1411, 1409,
     1423, 1422, 1406, 1412, 1425, 1407, 1416, 1408, 1417, 1427,
     1409,    0, 1420, 1418, 1417, 1416, 1421, 1410, 1411, 1422,
     1430, 1422, 1418, 1412, 1424, 1421, 1426,    0, 1417, 1423,
     1422, 1428, 1428, 1425, 1424, 1416,    0, 1417, 1427, 1426,
     1430,    0, 1418, 1417, 1424, 1421, 1426,    0, 1422, 1430,
     1422,    0, 1428, 1424,    0, 1426,    0, 1417,    0,    0,

     1428, 1428,    0, 1424,    0,    0,    0,    0, 1426, 1430,
        0,    0,    0, 1424,    0, 1426,    0,    0,    0,    0,
        0, 1428, 1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433,
     1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434,
     1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436,
     1436, 1436, 1437,    0,    0, 1437, 1437, 1437, 1439, 1439,
     1439,    0, 1439, 1439, 1440, 1440, 1440,    0, 1440, 1441,
     1441, 1441,    0, 1441, 1442, 1442, 1442,    0, 1442, 1442,
     1443,    0, 1443, 1443, 1443, 1443, 1444,    0, 1444, 1444,
     1444, 1444, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"


#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }
#define TRUE 1
#define FALSE 0

static thread_local std::stringstream strbuf;
char* substr(const char* source, int from, int to);
int curly_depth = 0;  
int bracket_depth = 0;
bool isit_curly = FALSE;
bool isit_bracket = FALSE;
#line 2427 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2441 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define escapedcurly 2
#define escapedbracket 3
#define FINAL_QUOTE 4
#define jsonpathstring 5
#define ARROW 6
#define COMMENT 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 63 "flex_lexer.l"


#line 2733 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1432 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1431 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 67 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "flex_lexer.l"

	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 69 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
/* FOR Queryhouse */
case 6:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ACTION)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(JSON)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(STORED)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(MATCH)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(WINDOW)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CUME_DIST)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(DENSE_RANK)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PERCENT_RANK)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(RANK)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(ROW_NUMBER)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(LAG)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(LEAD)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(NTILE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(FIRST_VALUE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(LAST_VALUE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(NTH_VALUE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(FILTER)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(TEMP)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(COUNT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(INDEXED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(GENERATED)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(ALWAYS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(TRIGGER)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(EACH)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(ROW)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(CURRENT)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(EXCLUDE)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(OTHERS)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
TOKEN(TIES)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
TOKEN(NOTHING)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 252 "flex_lexer.l"
TOKEN(NULLS)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 253 "flex_lexer.l"
TOKEN(LAST)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 254 "flex_lexer.l"
TOKEN(FIRST)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
TOKEN(DO)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
TOKEN(COLLATE)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 259 "flex_lexer.l"
{
	yylval->ival = 1;
	return SQL_INTVAL;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 263 "flex_lexer.l"
{
	yylval->ival = 0;
	return SQL_INTVAL;
}
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 182:
YY_RULE_SETUP
#line 268 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 269 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 272 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 273 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 274 "flex_lexer.l"
TOKEN(ARROW)
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 276 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 190:
#line 279 "flex_lexer.l"
case 191:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 284 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 289 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 295 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 302 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 303 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 304 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 305 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 306 "flex_lexer.l"
{  /*fprintf(stdout, "[SQL-Lexer-Error] Unterminated string\n"); */ return 0; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 309 "flex_lexer.l"
{ BEGIN jsonpathstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 310 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 311 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 312 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_JSONPATH_STRING; }
	YY_BREAK
case YY_STATE_EOF(jsonpathstring):
#line 313 "flex_lexer.l"
{  /*fprintf(stdout, "[SQL-Lexer-Error] Unterminated string\n"); */ return 0; }
	YY_BREAK
/* --- Handling Curly Braces { ... } --- */
case 203:
YY_RULE_SETUP
#line 316 "flex_lexer.l"
{ 
    curly_depth = 1;          
    bracket_depth = 0;
	isit_curly = TRUE;       
    BEGIN(escapedcurly);         
    strbuf = std::stringstream{}; 
    strbuf << yytext;            
}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 325 "flex_lexer.l"
{
    strbuf << yytext; 
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 329 "flex_lexer.l"
{
    curly_depth++; 
    strbuf << yytext;  
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 334 "flex_lexer.l"
{
    curly_depth--; 
    strbuf << yytext; 

    if (curly_depth == 0 && bracket_depth == 0) { 
        BEGIN(FINAL_QUOTE); 
    }
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 342 "flex_lexer.l"
{
    bracket_depth++; 
    strbuf << yytext; 
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 347 "flex_lexer.l"
{
    bracket_depth--; 
    strbuf << yytext; 
}
	YY_BREAK
case YY_STATE_EOF(escapedcurly):
#line 352 "flex_lexer.l"
{
    /* fprintf(stderr, "[SQL-Lexer-Error] Unterminated '{' literal\n"); */
    return 0;
}
	YY_BREAK
/* --- Handling Square Brackets [ ... ] --- */
case 209:
YY_RULE_SETUP
#line 358 "flex_lexer.l"
{ 
    bracket_depth = 1;            
    curly_depth = 0; 
	isit_bracket = TRUE;             
    BEGIN(escapedbracket);        
    strbuf = std::stringstream{};  
    strbuf << yytext;             
}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 367 "flex_lexer.l"
{
    strbuf << yytext;  
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 371 "flex_lexer.l"
{
    curly_depth++;    
    strbuf << yytext; 
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 376 "flex_lexer.l"
{
    curly_depth--;   
    strbuf << yytext; 
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 381 "flex_lexer.l"
{
    bracket_depth++;  
    strbuf << yytext; 
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 386 "flex_lexer.l"
{
    bracket_depth--; 
    strbuf << yytext; 

    if (curly_depth == 0 && bracket_depth == 0) {
        BEGIN(FINAL_QUOTE); 
    }
}
	YY_BREAK
case YY_STATE_EOF(escapedbracket):
#line 395 "flex_lexer.l"
{
    /* fprintf(stderr, "[SQL-Lexer-Error] Unterminated '[' literal\n"); */
    return 0; 
}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 400 "flex_lexer.l"
{
    strbuf << yytext;
    BEGIN(INITIAL);
    yylval->sval = strdup(strbuf.str().c_str());
	if (isit_curly == TRUE){
		isit_curly == FALSE;
		return SQL_ESCAPED_CURLY_LITERAL;
	}

	if (isit_bracket == TRUE){
		isit_bracket == FALSE;
		return SQL_ESCAPED_BRACKET_LITERAL;
	}
	return 0;
}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 416 "flex_lexer.l"
{ /*fprintf(stdout, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); */ return 0; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 419 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3983 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FINAL_QUOTE):
case YY_STATE_EOF(ARROW):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1432 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1432 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1431);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 419 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

char* substr(const char* source, int from, int to) {
    int len = to - from;
    char* copy = (char*)malloc(len + 1);
    // ;
    strncpy(copy, source + from, len);
    copy[len] = '\0';
    return copy;
}

int yyerror(const char *msg) {
    // fprintf(stdout, "[SQL-Lexer-Error] %s\n",msg);
    return 0;
}

