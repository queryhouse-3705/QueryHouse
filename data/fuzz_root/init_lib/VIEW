CREATE VIEW project_budget_summary AS SELECT project_id,SUM(budget) AS total_budget FROM project_funding GROUP BY project_id;
CREATE VIEW user_activity_summary AS SELECT user_id,COUNT(activity_id) AS activity_count FROM user_activities GROUP BY user_id;
CREATE VIEW monthly_login_stats AS SELECT MONTH(login_date) AS login_month,COUNT(user_id) AS total_logins FROM user_logins GROUP BY MONTH(login_date);
CREATE VIEW active_employees AS SELECT employee_id,employee_name,department_id FROM employees WHERE employment_status='Active';
CREATE VIEW top_rated_products AS SELECT product_id,product_name,rating FROM products WHERE rating>=4.7;
CREATE VIEW high_priority_tickets AS SELECT ticket_id,customer_id,priority FROM support_tickets WHERE priority='High';
CREATE VIEW overdue_invoices AS SELECT invoice_id,customer_id,due_date FROM invoices WHERE due_date<CURRENT_DATE();
CREATE VIEW training_participation AS SELECT training_id,COUNT(employee_id) AS participants FROM training_attendance GROUP BY training_id;
CREATE VIEW recent_feedback AS SELECT feedback_id,customer_id,feedback_date,feedback_text FROM feedback WHERE feedback_date>='2024-01-01';
CREATE VIEW project_completion_status AS SELECT project_id,project_name,completion_percentage FROM projects WHERE completion_percentage<100;
CREATE VIEW employee_leave_summary AS SELECT employee_id,COUNT(*) AS total_leaves FROM leave_records WHERE leave_status='Approved' GROUP BY employee_id;
CREATE VIEW customer_spending_summary AS SELECT customer_id,SUM(order_total) AS total_spent FROM orders GROUP BY customer_id;
CREATE VIEW popular_courses AS SELECT course_id,course_name,COUNT(student_id) AS enrollment_count FROM course_enrollments GROUP BY course_id;
CREATE VIEW supplier_performance AS SELECT supplier_id,AVG(delivery_time) AS avg_delivery_time FROM supplier_deliveries GROUP BY supplier_id;
CREATE VIEW daily_sales AS SELECT sale_date,SUM(sale_amount) AS total_sales FROM sales GROUP BY sale_date;
CREATE VIEW annual_growth AS SELECT YEAR(order_date) AS year, (SUM(order_total) - LAG(SUM(order_total)) OVER(ORDER BY YEAR(order_date))) AS growth FROM orders GROUP BY YEAR(order_date);
CREATE VIEW product_availability AS SELECT product_id,product_name,CASE WHEN stock > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS availability FROM inventory;
CREATE VIEW employee_performance AS SELECT employee_id,AVG(performance_score) AS avg_performance FROM performance_reviews GROUP BY employee_id;
CREATE VIEW monthly_profit AS SELECT MONTH(transaction_date) AS transaction_month, SUM(revenue) - SUM(cost) AS net_profit FROM transactions GROUP BY MONTH(transaction_date);
CREATE VIEW customer_retention AS SELECT customer_id, COUNT(order_id) AS total_orders FROM orders GROUP BY customer_id HAVING total_orders > 1;
CREATE VIEW overdue_tasks AS SELECT task_id,assigned_to,deadline FROM tasks WHERE deadline < CURRENT_DATE() AND status='Pending';
CREATE VIEW product_sales_summary AS SELECT product_id,SUM(quantity) AS total_sold,SUM(quantity*price) AS total_revenue FROM sales GROUP BY product_id;
CREATE VIEW team_productivity AS SELECT team_id,AVG(hours_worked) AS avg_hours FROM timesheets GROUP BY team_id;
CREATE VIEW regional_performance AS SELECT region,SUM(sales) AS total_sales,COUNT(sales_id) AS sales_count FROM regional_sales GROUP BY region;
CREATE VIEW upcoming_events AS SELECT event_id,event_name,event_date FROM events WHERE event_date > CURRENT_DATE();
CREATE VIEW supplier_rating AS SELECT supplier_id,AVG(rating) AS avg_rating FROM supplier_reviews GROUP BY supplier_id;
CREATE VIEW customer_feedback_summary AS SELECT customer_id,COUNT(feedback_id) AS feedback_count,AVG(rating) AS avg_rating FROM feedback GROUP BY customer_id;
CREATE VIEW employee_rewards AS SELECT employee_id,COUNT(reward_id) AS reward_count FROM rewards GROUP BY employee_id;
CREATE VIEW delayed_shipments AS SELECT shipment_id,delivery_date,CASE WHEN delivery_date > expected_date THEN 'Delayed' ELSE 'On Time' END AS status FROM shipments;
CREATE VIEW loan_summary AS SELECT loan_id,customer_id,SUM(payment_amount) AS total_paid,loan_amount-SUM(payment_amount) AS remaining_balance FROM loan_payments GROUP BY loan_id,customer_id;
CREATE VIEW project_duration_summary AS SELECT project_id, DATEDIFF(end_date, start_date) AS project_duration FROM projects;
CREATE VIEW attendance_rate AS SELECT employee_id, COUNT(CASE WHEN status='Present' THEN 1 ELSE NULL END)*100/COUNT(*) AS attendance_percentage FROM attendance GROUP BY employee_id;
CREATE VIEW failed_transactions AS SELECT transaction_id,amount,reason FROM transactions WHERE status='Failed';
CREATE VIEW yearly_expense_report AS SELECT YEAR(expense_date) AS year, SUM(expense_amount) AS total_expenses FROM expenses GROUP BY YEAR(expense_date);
CREATE VIEW customer_order_frequency AS SELECT customer_id,COUNT(order_id) AS total_orders,AVG(DATEDIFF(MAX(order_date),MIN(order_date))) AS avg_order_gap FROM orders GROUP BY customer_id;

