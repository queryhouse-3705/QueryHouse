WITH RECURSIVE cte_name AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM cte_name WHERE n < 10 LIMIT 10) SELECT * FROM cte_name;
WITH RECURSIVE numbers AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM numbers WHERE n < 10 LIMIT 10) SELECT * FROM numbers;
WITH RECURSIVE factorial AS (SELECT 1 AS n, 1 AS fact UNION ALL SELECT n + 1, (n + 1) * fact FROM factorial WHERE n < 5 LIMIT 10) SELECT * FROM factorial;
WITH RECURSIVE fibonacci AS (SELECT 0 AS a, 1 AS b UNION ALL SELECT b, a + b FROM fibonacci WHERE b < 100 LIMIT 10) SELECT a AS fib FROM fibonacci;
WITH RECURSIVE hierarchy AS (SELECT id as id, manager_id as manager_id, 1 AS level FROM employees WHERE manager_id IS NULL UNION ALL SELECT employees.id, employees.manager_id, hierarchy.level + 1 FROM employees JOIN hierarchy ON employees.manager_id = hierarchy.id LIMIT 10) SELECT * FROM hierarchy;
WITH RECURSIVE string_repeat AS (SELECT 1 AS level, 'A' AS str UNION ALL SELECT level + 1, str || 'A' FROM string_repeat WHERE level < 5 LIMIT 10) SELECT * FROM string_repeat;
WITH RECURSIVE powers_of_two AS (SELECT 1 AS n, 2 AS power UNION ALL SELECT n + 1, power * 2 FROM powers_of_two WHERE n < 10 LIMIT 10) SELECT * FROM powers_of_two;
WITH RECURSIVE path AS (SELECT start_node AS node FROM graph WHERE start_node = 'A' UNION ALL SELECT edges.end_node FROM path JOIN edges ON path.node = edges.start_node LIMIT 10) SELECT * FROM path;
WITH RECURSIVE numbers_square AS (SELECT 1 AS n, 1 AS square UNION ALL SELECT n + 1, (n + 1) * (n + 1) FROM numbers_square WHERE n < 10 LIMIT 10) SELECT * FROM numbers_square;
WITH RECURSIVE cte1 AS (SELECT 1 AS id UNION ALL SELECT id + 1 FROM cte1 WHERE id < 3 LIMIT 10), cte2 AS (SELECT 'A' AS letter UNION ALL SELECT letter || 'A' FROM cte2 WHERE LENGTH(letter) < 3 LIMIT 10) SELECT * FROM cte1, cte2;
WITH RECURSIVE alpha_num AS (SELECT 'A' AS letter, 1 AS num UNION ALL SELECT (letter + 1), num + 1 FROM alpha_num WHERE num < 5 LIMIT 10) SELECT * FROM alpha_num;
WITH RECURSIVE binary_tree AS (SELECT 1 AS id UNION ALL SELECT id * 2 FROM binary_tree WHERE id < 16 LIMIT 10) SELECT * FROM binary_tree;
WITH RECURSIVE count_down AS (SELECT 10 AS n UNION ALL SELECT n - 1 FROM count_down WHERE n > 0 LIMIT 10) SELECT * FROM count_down;
WITH RECURSIVE alternate_sum AS (SELECT 1 AS n, 1 AS total UNION ALL SELECT n + 1, CASE WHEN n % 2 = 0 THEN total + (n + 1) ELSE total - (n + 1) END FROM alternate_sum WHERE n < 10 LIMIT 10) SELECT * FROM alternate_sum;
WITH RECURSIVE depth_first_search AS (SELECT start_node AS start_node FROM nodes WHERE start_node = 'A' UNION ALL SELECT edges.end_node FROM edges WHERE start_node IN (SELECT start_node FROM depth_first_search) LIMIT 10) SELECT * FROM depth_first_search;
WITH RECURSIVE tree AS (SELECT id AS id, parent_id AS parent_id, 1 AS depth FROM items WHERE parent_id IS NULL UNION ALL SELECT items.id, items.parent_id, tree.depth + 1 FROM items JOIN tree ON items.parent_id = tree.id LIMIT 10) SELECT * FROM tree;
WITH RECURSIVE powers_of_three AS (SELECT 1 AS n, 3 AS power UNION ALL SELECT n + 1, power * 3 FROM powers_of_three WHERE n < 5 LIMIT 10) SELECT * FROM powers_of_three;
WITH RECURSIVE even_numbers AS (SELECT 2 AS n UNION ALL SELECT n + 2 FROM even_numbers WHERE n < 20 LIMIT 10) SELECT * FROM even_numbers;
WITH RECURSIVE sum_series AS (SELECT 1 AS n, 1 AS col_sum UNION ALL SELECT n + 1, col_sum + n + 1 FROM sum_series WHERE n < 5 LIMIT 10) SELECT * FROM sum_series;
WITH RECURSIVE number_chain AS (SELECT 1 AS n UNION ALL SELECT n * 2 FROM number_chain WHERE n < 64 LIMIT 10) SELECT * FROM number_chain;
WITH RECURSIVE path_finder AS (SELECT start_node AS node FROM paths WHERE start_node = 'A' UNION ALL SELECT paths.end_node FROM paths JOIN path_finder ON paths.start_node = path_finder.node LIMIT 10) SELECT * FROM path_finder;
WITH RECURSIVE binary_levels AS (SELECT 1 AS level UNION ALL SELECT level + 1 FROM binary_levels WHERE level < 5 LIMIT 10) SELECT * FROM binary_levels;
WITH RECURSIVE cumulative_sum AS (SELECT 1 AS n, 1 AS col_sum UNION ALL SELECT n + 1, col_sum + (n + 1) FROM cumulative_sum WHERE n < 10 LIMIT 10) SELECT * FROM cumulative_sum;
WITH RECURSIVE exponential_series AS (SELECT 1 AS n, 2 AS base UNION ALL SELECT n + 1, base * 2 FROM exponential_series WHERE n < 8 LIMIT 10) SELECT * FROM exponential_series;
WITH RECURSIVE reverse_count AS (SELECT 5 AS n UNION ALL SELECT n - 1 FROM reverse_count WHERE n > 1 LIMIT 10) SELECT * FROM reverse_count;
WITH RECURSIVE triangle_numbers AS (SELECT 1 AS n, 1 AS col_sum UNION ALL SELECT n + 1, col_sum + (n + 1) FROM triangle_numbers WHERE n < 10 LIMIT 10) SELECT * FROM triangle_numbers;
WITH RECURSIVE sequence AS (SELECT 1 AS value UNION ALL SELECT value+1 FROM sequence WHERE value<10 LIMIT 10) SELECT value FROM sequence;
WITH RECURSIVE factorial AS (SELECT 1 AS n, 1 AS fact UNION ALL SELECT n+1, fact*(n+1) FROM factorial WHERE n<5 LIMIT 10) SELECT * FROM factorial;
WITH RECURSIVE fibonacci AS (SELECT 0 AS n1, 1 AS n2 UNION ALL SELECT n2, n1+n2 FROM fibonacci WHERE n2<100 LIMIT 10) SELECT n1 AS fibonacci_number FROM fibonacci;
WITH RECURSIVE power_of_two AS (SELECT 1 AS value UNION ALL SELECT value*2 FROM power_of_two WHERE value<100 LIMIT 10) SELECT value FROM power_of_two;
WITH RECURSIVE countdown AS (SELECT 10 AS value UNION ALL SELECT value - 1 FROM countdown WHERE value > 0 LIMIT 10) SELECT value FROM countdown;
WITH RECURSIVE employee_hierarchy AS (SELECT employee_id AS employee_id, manager_id AS manager_id, 1 AS level FROM employees WHERE manager_id IS NULL UNION ALL SELECT employees.employee_id, employees.manager_id, employee_hierarchy.level+1 FROM employees JOIN employee_hierarchy ON employees.manager_id=employee_hierarchy.employee_id LIMIT 10) SELECT employee_id, level FROM employee_hierarchy;
WITH RECURSIVE triangle_numbers AS (SELECT 1 AS n, 1 AS triangle UNION ALL SELECT n+1, triangle+(n+1) FROM triangle_numbers WHERE n<10 LIMIT 10) SELECT triangle FROM triangle_numbers;
WITH RECURSIVE sum_of_n AS (SELECT 1 AS value, 1 AS sum_value UNION ALL SELECT value+1, sum_value+(value+1) FROM sum_of_n WHERE value<10 LIMIT 10) SELECT sum_value FROM sum_of_n;
WITH RECURSIVE exponential_sequence AS (SELECT 1 AS base, 2 AS exponent, 1 AS result UNION ALL SELECT base, exponent, result*base FROM exponential_sequence WHERE exponent<5 LIMIT 10) SELECT result FROM exponential_sequence;