SELECT AVG(duration) OVER(PARTITION BY genre) AS avg_duration_by_genre FROM movies;
SELECT AVG(rating) OVER(PARTITION BY genre ORDER BY release_date) AS avg_rating_by_genre_over_time FROM movies;
SELECT AVG(duration) OVER(ORDER BY release_date ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS rolling_avg_duration FROM movies;
SELECT AVG(viewership) OVER(PARTITION BY region) AS avg_viewership_by_region FROM tv_shows;
SELECT AVG(viewership) OVER(PARTITION BY category ORDER BY episode_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS rolling_avg_viewership_by_category FROM tv_shows;
SELECT AVG(exam_score) OVER(PARTITION BY subject ORDER BY exam_date) AS avg_exam_score_over_time FROM student_scores;
SELECT AVG(salary) OVER(PARTITION BY job_title ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_salary_by_job_title FROM employee_salaries;
SELECT AVG(profit) OVER(PARTITION BY business_unit ORDER BY fiscal_year RANGE BETWEEN 2 PRECEDING AND CURRENT ROW) AS avg_profit_by_unit_last_2_years FROM financials;
SELECT AVG(response_time) OVER(ORDER BY call_time ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_response_time FROM customer_service_calls;
SELECT AVG(rent) OVER(PARTITION BY city ORDER BY move_in_date ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS avg_rent_next_5_months FROM housing_data;
SELECT AVG(temperature) OVER(PARTITION BY city ORDER BY measurement_date ROWS BETWEEN INTERVAL '7' DAY PRECEDING AND CURRENT ROW) AS avg_temperature_last_week FROM weather_measurements;
SELECT AVG(score) OVER(PARTITION BY player ORDER BY match_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS avg_score_last_month_by_player FROM match_scores;
SELECT AVG(points) OVER(PARTITION BY team ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS avg_points_by_team FROM game_stats;
SELECT AVG(weight) OVER(PARTITION BY category ORDER BY check_date RANGE BETWEEN INTERVAL '3' MONTH PRECEDING AND CURRENT ROW) AS avg_weight_last_3_months_by_category FROM inventory;
SELECT AVG(production_cost) OVER(PARTITION BY factory ORDER BY production_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS avg_cost_last_3_days FROM production_data;
SELECT AVG(speed) OVER(PARTITION BY vehicle_type ORDER BY trip_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_speed_by_vehicle FROM travel_data;
SELECT AVG(delay_minutes) OVER(PARTITION BY airline ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS avg_delay_last_4_flights FROM flight_delays;
SELECT AVG(sales_amount) OVER(PARTITION BY product_category ORDER BY sale_date RANGE BETWEEN INTERVAL '1' YEAR PRECEDING AND CURRENT ROW) AS avg_sales_last_year_by_category FROM sales_data;
SELECT AVG(hours_worked) OVER(PARTITION BY job_title ORDER BY project_start_date ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING) AS avg_hours_project_timeframe FROM project_data;
SELECT AVG(test_score) OVER(PARTITION BY student_group ORDER BY test_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_test_score_by_group FROM student_tests;
SELECT AVG(energy_usage) OVER(PARTITION BY household ORDER BY billing_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS avg_energy_usage_last_7_months FROM energy_bills;
SELECT AVG(expense_amount) OVER(PARTITION BY expense_type ORDER BY transaction_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS avg_expense_recent_transactions FROM expense_reports;
SELECT AVG(speed) OVER(PARTITION BY road_section ORDER BY travel_time ROWS BETWEEN INTERVAL '1' HOUR PRECEDING AND CURRENT ROW) AS avg_speed_last_hour FROM traffic_data;
SELECT AVG(stock_price) OVER(PARTITION BY company ORDER BY market_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_stock_price FROM stock_market;
SELECT AVG(success_rate) OVER(PARTITION BY project_team ORDER BY milestone_date RANGE BETWEEN INTERVAL '6' MONTH PRECEDING AND CURRENT ROW) AS avg_success_rate_last_6_months FROM project_performance;
SELECT AVG(score) OVER(PARTITION BY athlete ORDER BY competition_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS avg_score_over_career FROM athlete_performance;
SELECT AVG(attendance) OVER(PARTITION BY event_category ORDER BY event_date ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS avg_attendance_last_6_events FROM event_data;
SELECT AVG(grades) OVER(PARTITION BY school_section ORDER BY semester RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS avg_grades_by_semester FROM school_records;
SELECT AVG(cost) OVER(PARTITION BY vendor ORDER BY order_date ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING) AS avg_cost_window FROM procurement_data;
SELECT AVG(rating) OVER(PARTITION BY product_category ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_rating FROM product_reviews;
SELECT AVG(value) OVER(PARTITION BY asset_type ORDER BY evaluation_date ROWS BETWEEN INTERVAL '1' YEAR PRECEDING AND CURRENT ROW) AS avg_asset_value_last_year FROM asset_data;
SELECT AVG(work_hours) OVER(PARTITION BY shift_type ORDER BY shift_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS avg_work_hours_by_shift FROM work_schedules;
SELECT AVG(score) OVER(PARTITION BY competition_category ORDER BY match_date ROWS BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS avg_score_last_week_by_category FROM competition_results

SELECT job_title, COUNT(*) OVER(PARTITION BY job_title) AS count_by_job_title FROM employees;
SELECT COUNT(*) OVER(ORDER BY hire_date ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS rolling_count_hires FROM employees;
SELECT region, COUNT(sales_id) OVER(PARTITION BY region ORDER BY sales_date) AS cumulative_count_by_region FROM sales;
SELECT COUNT(transaction_id) OVER(ORDER BY transaction_amount DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS count_around_transaction FROM transactions;
SELECT category, COUNT(*) OVER(PARTITION BY category ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_count_by_category FROM products;
SELECT COUNT(customer_id) OVER(PARTITION BY membership_level ORDER BY join_date RANGE BETWEEN INTERVAL '6' MONTH PRECEDING AND CURRENT ROW) AS count_last_6_months_by_membership FROM customers;
SELECT COUNT(*) OVER(ORDER BY event_date RANGE BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS count_events_last_week FROM events;
SELECT department, COUNT(*) OVER(PARTITION BY department ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) AS count_within_department_window FROM employees;
SELECT COUNT(project_id) OVER(PARTITION BY manager_id ORDER BY deadline RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_project_count_by_manager FROM projects;
SELECT COUNT(*) OVER(PARTITION BY product_line ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_count_by_product_line FROM sales;
SELECT COUNT(*) OVER(PARTITION BY city ORDER BY registration_date) AS cumulative_count_by_city FROM residents;
SELECT COUNT(*) OVER(PARTITION BY airline ORDER BY flight_date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS rolling_count_by_airline FROM flight_data;
SELECT category, COUNT(order_id) OVER(PARTITION BY category RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_order_count_by_category FROM orders;
SELECT COUNT(test_id) OVER(PARTITION BY subject ORDER BY test_date ROWS BETWEEN 4 PRECEDING AND 2 FOLLOWING) AS count_tests_by_subject FROM test_scores;
SELECT COUNT(*) OVER(PARTITION BY team ORDER BY match_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_count_by_team FROM matches;
SELECT COUNT(survey_id) OVER(ORDER BY submission_date ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS count_nearby_surveys FROM survey_responses;
SELECT COUNT(*) OVER(PARTITION BY store_id ORDER BY transaction_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS count_transactions_last_month FROM store_sales;
SELECT department, COUNT(*) OVER(PARTITION BY department ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS rolling_count_by_department FROM employees;
SELECT COUNT(*) OVER(PARTITION BY publisher_id ORDER BY publication_date) AS cumulative_count_by_publisher FROM books;
SELECT COUNT(*) OVER(PARTITION BY supplier_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_count_by_supplier FROM supply_orders;
SELECT COUNT(*) OVER(PARTITION BY class, subject ORDER BY exam_date) AS cumulative_count_by_class_and_subject FROM exam_records;
SELECT COUNT(message_id) OVER(ORDER BY timestamp ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS count_upcoming_messages FROM chat_logs;
SELECT COUNT(*) OVER(PARTITION BY user_id ORDER BY login_date ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING) AS rolling_count_logins_by_user FROM user_activity;
SELECT COUNT(*) OVER(PARTITION BY category RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_item_count_by_category FROM inventory;
SELECT COUNT(*) OVER(PARTITION BY project_type ORDER BY start_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS count_recent_projects_by_type FROM projects;
SELECT COUNT(post_id) OVER(PARTITION BY thread_id ORDER BY post_date ROWS BETWEEN INTERVAL '2' DAY PRECEDING AND CURRENT ROW) AS count_posts_last_2_days FROM forum_posts;
SELECT COUNT(*) OVER(PARTITION BY warehouse_id ORDER BY stock_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_stock_count_by_warehouse FROM warehouse_stock;
SELECT COUNT(log_id) OVER(ORDER BY access_time ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS count_recent_accesses FROM system_logs;
SELECT COUNT(*) OVER(PARTITION BY movie_genre ORDER BY release_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_movie_count_by_genre FROM movies;
SELECT COUNT(*) OVER(PARTITION BY game_id ORDER BY play_time ROWS BETWEEN INTERVAL '30' MINUTE PRECEDING AND CURRENT ROW) AS count_recent_players_by_game FROM online_games;

SELECT department, MAX(budget) OVER(PARTITION BY department) AS max_budget_by_department FROM departments;
SELECT MAX(temperature) OVER(PARTITION BY city ORDER BY record_date) AS max_temperature_by_city_over_time FROM weather_records;
SELECT MAX(sales_amount) OVER(PARTITION BY region ORDER BY sales_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS rolling_max_sales_in_region FROM sales;
SELECT MAX(duration) OVER(PARTITION BY movie_genre) AS max_duration_by_genre FROM movies;
SELECT MAX(rating) OVER(PARTITION BY director ORDER BY release_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_rating_by_director FROM movies;
SELECT MAX(stock_quantity) OVER(PARTITION BY product_category ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS max_stock_around_product_category FROM inventory;
SELECT MAX(hours_worked) OVER(PARTITION BY project_id ORDER BY task_start_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS max_hours_worked_last_month_by_project FROM task_logs;
SELECT MAX(profit_margin) OVER(PARTITION BY branch ORDER BY fiscal_year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS max_profit_margin_recent_years FROM financial_reports;
SELECT MAX(delivery_time) OVER(ORDER BY shipment_date ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS max_delivery_time_upcoming_shipments FROM shipments;
SELECT MAX(attendance) OVER(PARTITION BY event_type ORDER BY event_date ROWS BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS max_attendance_last_week_by_event FROM event_attendance;
SELECT MAX(review_score) OVER(PARTITION BY product_id ORDER BY review_date DESC) AS max_review_score_by_product FROM product_reviews;
SELECT MAX(response_time) OVER(PARTITION BY team ORDER BY call_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS max_response_time_recent_calls FROM customer_support;
SELECT MAX(bid_amount) OVER(PARTITION BY auction_id ORDER BY bid_time RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_bid_by_auction FROM bids;
SELECT MAX(speed) OVER(PARTITION BY route ORDER BY travel_time ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS max_speed_nearby_travel_times FROM traffic_data;
SELECT MAX(weight) OVER(PARTITION BY shipment_category ORDER BY shipment_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS max_weight_last_month_by_category FROM shipping_records;
SELECT MAX(payment) OVER(PARTITION BY employee_id ORDER BY payment_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS max_payment_by_employee FROM payroll;
SELECT MAX(grade) OVER(PARTITION BY class_id ORDER BY exam_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS max_grade_recent_exams_by_class FROM student_scores;
SELECT MAX(flight_delay) OVER(PARTITION BY airline ORDER BY flight_date RANGE BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS max_flight_delay_last_week_by_airline FROM flight_delays;
SELECT MAX(hours_logged) OVER(PARTITION BY project_manager ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS max_hours_around_project_manager FROM work_logs;
SELECT MAX(views) OVER(PARTITION BY content_type ORDER BY view_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS max_views_recent_content FROM content_views;
SELECT MAX(score) OVER(PARTITION BY game_id ORDER BY play_time ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS max_score_upcoming_plays FROM game_scores;
SELECT MAX(price) OVER(PARTITION BY vendor_id ORDER BY purchase_date ROWS BETWEEN INTERVAL '6' MONTH PRECEDING AND CURRENT ROW) AS max_price_last_6_months_by_vendor FROM purchase_orders;
SELECT MAX(sales) OVER(PARTITION BY region RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS max_sales_by_region FROM regional_sales;
SELECT MAX(stock_level) OVER(PARTITION BY supplier_id ORDER BY restock_date ROWS BETWEEN 4 PRECEDING AND 4 FOLLOWING) AS max_stock_nearby_restock FROM supplier_stocks;
SELECT MAX(salary) OVER(PARTITION BY job_title RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS max_salary_by_job_title FROM employees;
SELECT MAX(match_score) OVER(PARTITION BY player ORDER BY match_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS max_match_score_last_3_matches FROM match_results;
SELECT MAX(production_time) OVER(PARTITION BY factory_id ORDER BY production_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_production_time_by_factory FROM production_data;
SELECT MAX(expense_amount) OVER(PARTITION BY expense_type ORDER BY expense_date ROWS BETWEEN INTERVAL '1' YEAR PRECEDING AND CURRENT ROW) AS max_expense_last_year_by_type FROM expenses;
SELECT MAX(review_score) OVER(PARTITION BY hotel_id ORDER BY stay_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS max_review_score_last_4_stays FROM hotel_reviews;
SELECT MAX(score) OVER(PARTITION BY exam_type ORDER BY exam_date ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS max_score_next_5_exams FROM exam_scores;
SELECT MAX(duration) OVER(PARTITION BY activity_type ORDER BY activity_date RANGE BETWEEN INTERVAL '30' DAY PRECEDING AND CURRENT ROW) AS max_duration_last_month_by_activity FROM activity_logs;
SELECT MAX(profit) OVER(PARTITION BY company_id ORDER BY quarter RANGE BETWEEN INTERVAL '1' QUARTER PRECEDING AND CURRENT ROW) AS max_profit_last_quarter FROM company_finances;
SELECT MAX(temperature) OVER(PARTITION BY region ORDER BY record_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS max_temperature_recent_days FROM temperature_records;

SELECT department, MIN(budget) OVER(PARTITION BY department) AS min_budget_by_department FROM departments;
SELECT MIN(temperature) OVER(PARTITION BY city ORDER BY record_date) AS min_temperature_by_city_over_time FROM weather_records;
SELECT MIN(sales_amount) OVER(PARTITION BY region ORDER BY sales_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS rolling_min_sales_in_region FROM sales;
SELECT MIN(duration) OVER(PARTITION BY movie_genre) AS min_duration_by_genre FROM movies;
SELECT MIN(rating) OVER(PARTITION BY director ORDER BY release_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_rating_by_director FROM movies;
SELECT MIN(stock_quantity) OVER(PARTITION BY product_category ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS min_stock_around_product_category FROM inventory;
SELECT MIN(hours_worked) OVER(PARTITION BY project_id ORDER BY task_start_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS min_hours_worked_last_month_by_project FROM task_logs;
SELECT MIN(profit_margin) OVER(PARTITION BY branch ORDER BY fiscal_year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS min_profit_margin_recent_years FROM financial_reports;
SELECT MIN(delivery_time) OVER(ORDER BY shipment_date ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS min_delivery_time_upcoming_shipments FROM shipments;
SELECT MIN(attendance) OVER(PARTITION BY event_type ORDER BY event_date ROWS BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS min_attendance_last_week_by_event FROM event_attendance;
SELECT MIN(review_score) OVER(PARTITION BY product_id ORDER BY review_date DESC) AS min_review_score_by_product FROM product_reviews;
SELECT MIN(response_time) OVER(PARTITION BY team ORDER BY call_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS min_response_time_recent_calls FROM customer_support;
SELECT MIN(bid_amount) OVER(PARTITION BY auction_id ORDER BY bid_time RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_bid_by_auction FROM bids;
SELECT MIN(speed) OVER(PARTITION BY route ORDER BY travel_time ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS min_speed_nearby_travel_times FROM traffic_data;
SELECT MIN(weight) OVER(PARTITION BY shipment_category ORDER BY shipment_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS min_weight_last_month_by_category FROM shipping_records;
SELECT MIN(payment) OVER(PARTITION BY employee_id ORDER BY payment_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS min_payment_by_employee FROM payroll;
SELECT MIN(grade) OVER(PARTITION BY class_id ORDER BY exam_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS min_grade_recent_exams_by_class FROM student_scores;
SELECT MIN(flight_delay) OVER(PARTITION BY airline ORDER BY flight_date RANGE BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS min_flight_delay_last_week_by_airline FROM flight_delays;
SELECT MIN(hours_logged) OVER(PARTITION BY project_manager ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS min_hours_around_project_manager FROM work_logs;
SELECT MIN(views) OVER(PARTITION BY content_type ORDER BY view_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS min_views_recent_content FROM content_views;
SELECT MIN(score) OVER(PARTITION BY game_id ORDER BY play_time ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS min_score_upcoming_plays FROM game_scores;
SELECT MIN(price) OVER(PARTITION BY vendor_id ORDER BY purchase_date ROWS BETWEEN INTERVAL '6' MONTH PRECEDING AND CURRENT ROW) AS min_price_last_6_months_by_vendor FROM purchase_orders;
SELECT MIN(sales) OVER(PARTITION BY region RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS min_sales_by_region FROM regional_sales;
SELECT MIN(stock_level) OVER(PARTITION BY supplier_id ORDER BY restock_date ROWS BETWEEN 4 PRECEDING AND 4 FOLLOWING) AS min_stock_nearby_restock FROM supplier_stocks;
SELECT MIN(salary) OVER(PARTITION BY job_title RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS min_salary_by_job_title FROM employees;
SELECT MIN(match_score) OVER(PARTITION BY player ORDER BY match_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS min_match_score_last_3_matches FROM match_results;
SELECT MIN(production_time) OVER(PARTITION BY factory_id ORDER BY production_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_production_time_by_factory FROM production_data;
SELECT MIN(expense_amount) OVER(PARTITION BY expense_type ORDER BY expense_date ROWS BETWEEN INTERVAL '1' YEAR PRECEDING AND CURRENT ROW) AS min_expense_last_year_by_type FROM expenses;
SELECT MIN(review_score) OVER(PARTITION BY hotel_id ORDER BY stay_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS min_review_score_last_4_stays FROM hotel_reviews;
SELECT MIN(score) OVER(PARTITION BY exam_type ORDER BY exam_date ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS min_score_next_5_exams FROM exam_scores;
SELECT MIN(duration) OVER(PARTITION BY activity_type ORDER BY activity_date RANGE BETWEEN INTERVAL '30' DAY PRECEDING AND CURRENT ROW) AS min_duration_last_month_by_activity FROM activity_logs;
SELECT MIN(profit) OVER(PARTITION BY company_id ORDER BY quarter RANGE BETWEEN INTERVAL '1' QUARTER PRECEDING AND CURRENT ROW) AS min_profit_last_quarter FROM company_finances;
SELECT MIN(temperature) OVER(PARTITION BY region ORDER BY record_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS min_temperature_recent_days FROM temperature_records;

SELECT department, SUM(budget) OVER(PARTITION BY department) AS total_budget_by_department FROM departments;
SELECT SUM(temperature) OVER(PARTITION BY city ORDER BY record_date) AS cumulative_temperature_by_city FROM weather_records;
SELECT SUM(sales_amount) OVER(PARTITION BY region ORDER BY sales_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS rolling_sales_in_region FROM sales;
SELECT SUM(duration) OVER(PARTITION BY movie_genre) AS total_duration_by_genre FROM movies;
SELECT SUM(rating) OVER(PARTITION BY director ORDER BY release_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_rating_by_director FROM movies;
SELECT SUM(stock_quantity) OVER(PARTITION BY product_category ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS total_stock_around_product_category FROM inventory;
SELECT SUM(hours_worked) OVER(PARTITION BY project_id ORDER BY task_start_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS total_hours_worked_last_month_by_project FROM task_logs;
SELECT SUM(profit_margin) OVER(PARTITION BY branch ORDER BY fiscal_year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS cumulative_profit_margin_recent_years FROM financial_reports;
SELECT SUM(delivery_time) OVER(ORDER BY shipment_date ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS total_delivery_time_upcoming_shipments FROM shipments;
SELECT SUM(attendance) OVER(PARTITION BY event_type ORDER BY event_date ROWS BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS total_attendance_last_week_by_event FROM event_attendance;
SELECT SUM(review_score) OVER(PARTITION BY product_id ORDER BY review_date DESC) AS cumulative_review_score_by_product FROM product_reviews;
SELECT SUM(response_time) OVER(PARTITION BY team ORDER BY call_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_total_response_time_recent_calls FROM customer_support;
SELECT SUM(bid_amount) OVER(PARTITION BY auction_id ORDER BY bid_time RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_bid_amount_by_auction FROM bids;
SELECT SUM(speed) OVER(PARTITION BY route ORDER BY travel_time ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS rolling_total_speed_nearby_travel_times FROM traffic_data;
SELECT SUM(weight) OVER(PARTITION BY shipment_category ORDER BY shipment_date RANGE BETWEEN INTERVAL '1' MONTH PRECEDING AND CURRENT ROW) AS total_weight_last_month_by_category FROM shipping_records;
SELECT SUM(payment) OVER(PARTITION BY employee_id ORDER BY payment_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_payment_by_employee FROM payroll;
SELECT SUM(grade) OVER(PARTITION BY class_id ORDER BY exam_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS total_grade_recent_exams_by_class FROM student_scores;
SELECT SUM(flight_delay) OVER(PARTITION BY airline ORDER BY flight_date RANGE BETWEEN INTERVAL '1' WEEK PRECEDING AND CURRENT ROW) AS total_flight_delay_last_week_by_airline FROM flight_delays;
SELECT SUM(hours_logged) OVER(PARTITION BY project_manager ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS total_hours_around_project_manager FROM work_logs;
SELECT SUM(views) OVER(PARTITION BY content_type ORDER BY view_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_total_views_recent_content FROM content_views;
SELECT SUM(score) OVER(PARTITION BY game_id ORDER BY play_time ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS total_score_upcoming_plays FROM game_scores;
SELECT SUM(price) OVER(PARTITION BY vendor_id ORDER BY purchase_date ROWS BETWEEN INTERVAL '6' MONTH PRECEDING AND CURRENT ROW) AS cumulative_price_last_6_months_by_vendor FROM purchase_orders;
SELECT SUM(sales) OVER(PARTITION BY region RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_sales_by_region FROM regional_sales;
SELECT SUM(stock_level) OVER(PARTITION BY supplier_id ORDER BY restock_date ROWS BETWEEN 4 PRECEDING AND 4 FOLLOWING) AS rolling_total_stock_nearby_restock FROM supplier_stocks;
SELECT SUM(salary) OVER(PARTITION BY job_title RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS total_salary_by_job_title FROM employees;
SELECT SUM(match_score) OVER(PARTITION BY player ORDER BY match_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_total_match_score_last_3_matches FROM match_results;
SELECT SUM(production_time) OVER(PARTITION BY factory_id ORDER BY production_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_production_time_by_factory FROM production_data;
SELECT SUM(expense_amount) OVER(PARTITION BY expense_type ORDER BY expense_date ROWS BETWEEN INTERVAL '1' YEAR PRECEDING AND CURRENT ROW) AS total_expense_last_year_by_type FROM expenses;
SELECT SUM(review_score) OVER(PARTITION BY hotel_id ORDER BY stay_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS total_review_score_last_4_stays FROM hotel_reviews;
SELECT SUM(score) OVER(PARTITION BY exam_type ORDER BY exam_date ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS total_score_next_5_exams FROM exam_scores;
SELECT SUM(duration) OVER(PARTITION BY activity_type ORDER BY activity_date RANGE BETWEEN INTERVAL '30' DAY PRECEDING AND CURRENT ROW) AS cumulative_duration_last_month_by_activity FROM activity_logs;
SELECT SUM(profit) OVER(PARTITION BY company_id ORDER BY quarter RANGE BETWEEN INTERVAL '1' QUARTER PRECEDING AND CURRENT ROW) AS total_profit_last_quarter FROM company_finances;
SELECT SUM(temperature) OVER(PARTITION BY region ORDER BY record_date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS rolling_total_temperature_recent_days FROM temperature_records;

SELECT product_id, sales_amount, CUME_DIST() OVER(ORDER BY sales_amount DESC) AS cumulative_distribution_sales_amount FROM products;
SELECT project_id, budget, CUME_DIST() OVER(PARTITION BY department ORDER BY budget ASC) AS cumulative_dist_budget_department FROM projects;
SELECT employee_id, hours_worked, CUME_DIST() OVER(ORDER BY hours_worked DESC) AS cumulative_distribution_hours_worked FROM timesheets;
SELECT team_id, match_score, CUME_DIST() OVER(PARTITION BY team_id ORDER BY match_score DESC) AS cumulative_dist_match_score_team FROM matches;
SELECT city_id, population, CUME_DIST() OVER(ORDER BY population ASC) AS cumulative_distribution_city_population FROM cities;
SELECT flight_id, delay_minutes, CUME_DIST() OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS cumulative_dist_flight_delay_by_airline FROM flight_delays;
SELECT branch_id, revenue, CUME_DIST() OVER(PARTITION BY region ORDER BY revenue ASC) AS cumulative_dist_revenue_by_region FROM branches;
SELECT class_id, attendance, CUME_DIST() OVER(PARTITION BY class_id ORDER BY attendance DESC) AS cumulative_dist_class_attendance FROM classes;
SELECT student_id, gpa, CUME_DIST() OVER(PARTITION BY school_id ORDER BY gpa DESC) AS cumulative_dist_gpa_by_school FROM students;
SELECT movie_id, rating, CUME_DIST() OVER(ORDER BY rating DESC) AS cumulative_distribution_movie_rating FROM movies;
SELECT vehicle_id, mileage, CUME_DIST() OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS cumulative_dist_mileage_by_vehicle_type FROM vehicle_records;
SELECT survey_id, response_time, CUME_DIST() OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS cumulative_dist_response_time_by_survey FROM survey_responses;
SELECT store_id, sales_amount, CUME_DIST() OVER(ORDER BY sales_amount DESC) AS cumulative_distribution_store_sales FROM store_sales;
SELECT athlete_id, score, CUME_DIST() OVER(PARTITION BY sport ORDER BY score DESC) AS cumulative_dist_score_by_sport FROM athlete_scores;
SELECT supplier_id, delivery_time, CUME_DIST() OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS cumulative_dist_delivery_time_by_product FROM supplier_deliveries;
SELECT author_id, books_published, CUME_DIST() OVER(PARTITION BY genre ORDER BY books_published DESC) AS cumulative_dist_books_published_by_genre FROM authors;
SELECT user_id, login_count, CUME_DIST() OVER(PARTITION BY platform ORDER BY login_count DESC) AS cumulative_dist_login_count_by_platform FROM user_activity;
SELECT content_id, views, CUME_DIST() OVER(ORDER BY views DESC) AS cumulative_distribution_content_views FROM content_statistics;
SELECT product_id, review_score, CUME_DIST() OVER(PARTITION BY product_category ORDER BY review_score DESC) AS cumulative_dist_review_score_by_category FROM product_reviews;
SELECT transaction_id, amount, CUME_DIST() OVER(ORDER BY amount DESC) AS cumulative_distribution_transaction_amount FROM transactions;
SELECT professor_id, publications, CUME_DIST() OVER(PARTITION BY department ORDER BY publications DESC) AS cumulative_dist_publications_by_department FROM professors;
SELECT order_id, revenue_generated, CUME_DIST() OVER(PARTITION BY customer_id ORDER BY revenue_generated DESC) AS cumulative_dist_revenue_by_customer FROM orders;
SELECT content_id, engagement_rate, CUME_DIST() OVER(PARTITION BY content_type ORDER BY engagement_rate DESC) AS cumulative_dist_engagement_rate_by_content_type FROM content_metrics;
SELECT student_id, exam_score, CUME_DIST() OVER(PARTITION BY exam_type ORDER BY exam_score DESC) AS cumulative_dist_exam_score_by_exam_type FROM exam_results;
SELECT asset_id, value, CUME_DIST() OVER(PARTITION BY asset_type ORDER BY value DESC) AS cumulative_dist_value_by_asset_type FROM assets;
SELECT application_id, response_time, CUME_DIST() OVER(PARTITION BY server ORDER BY response_time ASC) AS cumulative_dist_response_time_by_server FROM server_logs;
SELECT region_id, profit_margin, CUME_DIST() OVER(PARTITION BY market ORDER BY profit_margin DESC) AS cumulative_dist_profit_margin_by_market FROM market_analysis;
SELECT employee_id, tenure_years, CUME_DIST() OVER(PARTITION BY company ORDER BY tenure_years DESC) AS cumulative_dist_tenure_by_company FROM employees;
SELECT hospital_id, patient_count, CUME_DIST() OVER(PARTITION BY city ORDER BY patient_count DESC) AS cumulative_dist_patient_count_by_city FROM hospitals;
SELECT event_id, tickets_sold, CUME_DIST() OVER(PARTITION BY event_type ORDER BY tickets_sold DESC) AS cumulative_dist_tickets_sold_by_event_type FROM events;
SELECT store_id, refund_amount, CUME_DIST() OVER(PARTITION BY store_category ORDER BY refund_amount DESC) AS cumulative_dist_refund_by_store_category FROM refunds;
SELECT ticket_id, response_time, CUME_DIST() OVER(PARTITION BY support_team ORDER BY response_time ASC) AS cumulative_dist_response_time_by_team FROM support_tickets;

SELECT athlete_id, score, DENSE_RANK() OVER(PARTITION BY sport ORDER BY score DESC) AS dense_rank_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, DENSE_RANK() OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS dense_rank_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, DENSE_RANK() OVER(ORDER BY hours_worked DESC) AS dense_rank_hours_worked FROM timesheets;
SELECT branch_id, revenue, DENSE_RANK() OVER(PARTITION BY region ORDER BY revenue DESC) AS dense_rank_revenue_by_region FROM branches;
SELECT city_id, population, DENSE_RANK() OVER(ORDER BY population DESC) AS dense_rank_city_population FROM cities;
SELECT flight_id, delay_minutes, DENSE_RANK() OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS dense_rank_flight_delays_by_airline FROM flight_delays;
SELECT class_id, attendance, DENSE_RANK() OVER(PARTITION BY class_id ORDER BY attendance DESC) AS dense_rank_attendance_by_class FROM classes;
SELECT product_id, sales_amount, DENSE_RANK() OVER(ORDER BY sales_amount ASC) AS dense_rank_sales_amount FROM products;
SELECT content_id, views, DENSE_RANK() OVER(PARTITION BY content_type ORDER BY views DESC) AS dense_rank_views_by_content_type FROM content_statistics;
SELECT store_id, sales, DENSE_RANK() OVER(ORDER BY sales DESC) AS dense_rank_store_sales FROM store_sales;
SELECT supplier_id, delivery_time, DENSE_RANK() OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS dense_rank_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, DENSE_RANK() OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS dense_rank_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, DENSE_RANK() OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS dense_rank_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, DENSE_RANK() OVER(PARTITION BY support_team ORDER BY response_time ASC) AS dense_rank_response_time_by_team FROM support_tickets;
SELECT professor_id, publications, DENSE_RANK() OVER(PARTITION BY department ORDER BY publications DESC) AS dense_rank_publications_by_department FROM professors;
SELECT athlete_id, rank_points, DENSE_RANK() OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS dense_rank_points_by_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY refund_amount DESC) AS dense_rank_refund_by_customer FROM refunds;
SELECT application_id, response_time, DENSE_RANK() OVER(PARTITION BY server ORDER BY response_time ASC) AS dense_rank_response_time_by_server FROM server_logs;
SELECT store_id, expenses, DENSE_RANK() OVER(PARTITION BY store_category ORDER BY expenses DESC) AS dense_rank_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, DENSE_RANK() OVER(PARTITION BY team ORDER BY match_score DESC) AS dense_rank_match_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, DENSE_RANK() OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS dense_rank_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, DENSE_RANK() OVER(PARTITION BY market ORDER BY profit_margin DESC) AS dense_rank_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, DENSE_RANK() OVER(PARTITION BY school_id ORDER BY gpa DESC) AS dense_rank_gpa_by_school FROM students;
SELECT video_id, likes, DENSE_RANK() OVER(PARTITION BY category ORDER BY likes DESC) AS dense_rank_likes_by_category FROM video_stats;
SELECT property_id, price, DENSE_RANK() OVER(PARTITION BY city ORDER BY price DESC) AS dense_rank_property_price_by_city FROM property_listings;
SELECT project_id, completion_time, DENSE_RANK() OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS dense_rank_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, DENSE_RANK() OVER(PARTITION BY genre ORDER BY books_published DESC) AS dense_rank_books_published_by_genre FROM authors;
SELECT student_id, test_score, DENSE_RANK() OVER(PARTITION BY test_type ORDER BY test_score DESC) AS dense_rank_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, DENSE_RANK() OVER(PARTITION BY city ORDER BY patient_count DESC) AS dense_rank_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, DENSE_RANK() OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS dense_rank_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, DENSE_RANK() OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS dense_rank_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, DENSE_RANK() OVER(PARTITION BY department ORDER BY hours_spent DESC) AS dense_rank_hours_by_department FROM projects;
SELECT city_id, crime_rate, DENSE_RANK() OVER(PARTITION BY region ORDER BY crime_rate ASC) AS dense_rank_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, DENSE_RANK() OVER(PARTITION BY service_category ORDER BY rating DESC) AS dense_rank_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, FIRST_VALUE(score) OVER(PARTITION BY sport ORDER BY score DESC) AS highest_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, FIRST_VALUE(mileage) OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS lowest_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, FIRST_VALUE(hours_worked) OVER(ORDER BY hours_worked DESC) AS max_hours_worked FROM timesheets;
SELECT branch_id, revenue, FIRST_VALUE(revenue) OVER(PARTITION BY region ORDER BY revenue DESC) AS highest_revenue_by_region FROM branches;
SELECT city_id, population, FIRST_VALUE(population) OVER(ORDER BY population DESC) AS largest_population_by_city FROM cities;
SELECT flight_id, delay_minutes, FIRST_VALUE(delay_minutes) OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS longest_flight_delay_by_airline FROM flight_delays;
SELECT class_id, attendance, FIRST_VALUE(attendance) OVER(PARTITION BY class_id ORDER BY attendance DESC) AS highest_attendance_in_class FROM classes;
SELECT product_id, sales_amount, FIRST_VALUE(sales_amount) OVER(ORDER BY sales_amount DESC) AS highest_sales_amount FROM products;
SELECT content_id, views, FIRST_VALUE(views) OVER(PARTITION BY content_type ORDER BY views DESC) AS most_viewed_content_by_type FROM content_statistics;
SELECT store_id, sales, FIRST_VALUE(sales) OVER(ORDER BY sales DESC) AS highest_sales_by_store FROM store_sales;
SELECT supplier_id, delivery_time, FIRST_VALUE(delivery_time) OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS fastest_delivery_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, FIRST_VALUE(response_time) OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS quickest_response_by_survey_type FROM survey_responses;
SELECT content_id, engagement_rate, FIRST_VALUE(engagement_rate) OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS highest_engagement_by_category FROM content_metrics;
SELECT ticket_id, response_time, FIRST_VALUE(response_time) OVER(PARTITION BY support_team ORDER BY response_time ASC) AS fastest_response_by_support_team FROM support_tickets;
SELECT professor_id, publications, FIRST_VALUE(publications) OVER(PARTITION BY department ORDER BY publications DESC) AS most_published_professor_by_department FROM professors;
SELECT athlete_id, rank_points, FIRST_VALUE(rank_points) OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS top_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, FIRST_VALUE(refund_amount) OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS first_refund_by_customer FROM refunds;
SELECT application_id, response_time, FIRST_VALUE(response_time) OVER(PARTITION BY server ORDER BY response_time ASC) AS fastest_application_response_by_server FROM server_logs;
SELECT store_id, expenses, FIRST_VALUE(expenses) OVER(PARTITION BY store_category ORDER BY expenses DESC) AS highest_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, FIRST_VALUE(match_score) OVER(PARTITION BY team ORDER BY match_score DESC) AS top_match_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, FIRST_VALUE(issue_severity) OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS highest_severity_issue_by_team FROM issue_tracking;
SELECT region_id, profit_margin, FIRST_VALUE(profit_margin) OVER(PARTITION BY market ORDER BY profit_margin DESC) AS highest_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, FIRST_VALUE(gpa) OVER(PARTITION BY school_id ORDER BY gpa DESC) AS top_gpa_by_school FROM students;
SELECT video_id, likes, FIRST_VALUE(likes) OVER(PARTITION BY category ORDER BY likes DESC) AS most_liked_video_by_category FROM video_stats;
SELECT property_id, price, FIRST_VALUE(price) OVER(PARTITION BY city ORDER BY price ASC) AS cheapest_property_by_city FROM property_listings;
SELECT project_id, completion_time, FIRST_VALUE(completion_time) OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS shortest_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, FIRST_VALUE(books_published) OVER(PARTITION BY genre ORDER BY books_published DESC) AS most_books_published_by_genre FROM authors;
SELECT student_id, test_score, FIRST_VALUE(test_score) OVER(PARTITION BY test_type ORDER BY test_score DESC) AS top_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, FIRST_VALUE(patient_count) OVER(PARTITION BY city ORDER BY patient_count DESC) AS busiest_hospital_by_city FROM hospitals;
SELECT user_id, login_frequency, FIRST_VALUE(login_frequency) OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS most_frequent_user_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, FIRST_VALUE(satisfaction_level) OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS most_satisfied_service_user FROM survey_data;
SELECT project_id, hours_spent, FIRST_VALUE(hours_spent) OVER(PARTITION BY department ORDER BY hours_spent DESC) AS most_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, FIRST_VALUE(crime_rate) OVER(PARTITION BY region ORDER BY crime_rate ASC) AS lowest_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, FIRST_VALUE(rating) OVER(PARTITION BY service_category ORDER BY rating DESC) AS highest_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, LAG(score, 1) OVER(PARTITION BY sport ORDER BY match_date DESC) AS previous_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, LAG(mileage, 2) OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS mileage_two_positions_ago FROM vehicle_records;
SELECT employee_id, hours_worked, LAG(hours_worked, 1, 0) OVER(ORDER BY hours_worked DESC) AS previous_hours_worked FROM timesheets;
SELECT branch_id, revenue, LAG(revenue, 1) OVER(PARTITION BY region ORDER BY revenue DESC) AS previous_revenue_by_region FROM branches;
SELECT city_id, population, LAG(population, 1) OVER(ORDER BY population DESC) AS previous_population_by_city FROM cities;
SELECT flight_id, delay_minutes, LAG(delay_minutes, 2) OVER(PARTITION BY airline ORDER BY flight_date DESC) AS delay_two_flights_ago FROM flight_delays;
SELECT class_id, attendance, LAG(attendance, 1, 0) OVER(PARTITION BY class_id ORDER BY attendance DESC) AS previous_attendance_in_class FROM classes;
SELECT product_id, sales_amount, LAG(sales_amount, 1) OVER(ORDER BY sales_amount DESC) AS previous_sales_amount FROM products;
SELECT content_id, views, LAG(views, 1) OVER(PARTITION BY content_type ORDER BY views DESC) AS previous_views_by_content_type FROM content_statistics;
SELECT store_id, sales, LAG(sales, 2) OVER(ORDER BY sales DESC) AS sales_two_positions_ago FROM store_sales;
SELECT supplier_id, delivery_time, LAG(delivery_time, 1) OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS previous_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, LAG(response_time, 1, 0) OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS previous_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, LAG(engagement_rate, 1) OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS previous_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, LAG(response_time, 2, 0) OVER(PARTITION BY support_team ORDER BY response_time ASC) AS response_two_tickets_ago FROM support_tickets;
SELECT professor_id, publications, LAG(publications, 1) OVER(PARTITION BY department ORDER BY publications DESC) AS previous_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, LAG(rank_points, 1) OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS previous_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, LAG(refund_amount, 2) OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS refund_two_orders_ago FROM refunds;
SELECT application_id, response_time, LAG(response_time, 1, 0) OVER(PARTITION BY server ORDER BY response_time ASC) AS previous_application_response_time FROM server_logs;
SELECT store_id, expenses, LAG(expenses, 1) OVER(PARTITION BY store_category ORDER BY expenses DESC) AS previous_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, LAG(match_score, 2, 0) OVER(PARTITION BY team ORDER BY match_date DESC) AS score_two_matches_ago FROM match_statistics;
SELECT ticket_id, issue_severity, LAG(issue_severity, 1) OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS previous_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, LAG(profit_margin, 1) OVER(PARTITION BY market ORDER BY profit_margin DESC) AS previous_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, LAG(gpa, 1, 0) OVER(PARTITION BY school_id ORDER BY gpa DESC) AS previous_gpa_by_school FROM students;
SELECT video_id, likes, LAG(likes, 1) OVER(PARTITION BY category ORDER BY likes DESC) AS previous_likes_by_video FROM video_stats;
SELECT property_id, price, LAG(price, 2) OVER(PARTITION BY city ORDER BY price ASC) AS price_two_positions_ago FROM property_listings;
SELECT project_id, completion_time, LAG(completion_time, 1, 0) OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS previous_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, LAG(books_published, 1) OVER(PARTITION BY genre ORDER BY books_published DESC) AS previous_books_published_by_genre FROM authors;
SELECT student_id, test_score, LAG(test_score, 2, 0) OVER(PARTITION BY test_type ORDER BY test_score DESC) AS score_two_tests_ago FROM test_results;
SELECT hospital_id, patient_count, LAG(patient_count, 1) OVER(PARTITION BY city ORDER BY patient_count DESC) AS previous_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, LAG(login_frequency, 1, 0) OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS previous_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, LAG(satisfaction_level, 1, 0) OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS previous_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, LAG(hours_spent, 1) OVER(PARTITION BY department ORDER BY hours_spent DESC) AS previous_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, LAG(crime_rate, 2) OVER(PARTITION BY region ORDER BY crime_rate ASC) AS crime_rate_two_positions_ago FROM crime_statistics;
SELECT service_id, rating, LAG(rating, 1) OVER(PARTITION BY service_category ORDER BY rating DESC) AS previous_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, LAST_VALUE(score) OVER(PARTITION BY sport ORDER BY match_date RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, LAST_VALUE(mileage) OVER(PARTITION BY vehicle_type ORDER BY mileage DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, LAST_VALUE(hours_worked) OVER(ORDER BY hours_worked RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_hours_worked FROM timesheets;
SELECT branch_id, revenue, LAST_VALUE(revenue) OVER(PARTITION BY region ORDER BY revenue RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_revenue_by_region FROM branches;
SELECT city_id, population, LAST_VALUE(population) OVER(ORDER BY population RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_population_by_city FROM cities;
SELECT flight_id, delay_minutes, LAST_VALUE(delay_minutes) OVER(PARTITION BY airline ORDER BY delay_minutes RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_delay_by_airline FROM flight_delays;
SELECT class_id, attendance, LAST_VALUE(attendance) OVER(PARTITION BY class_id ORDER BY attendance DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_attendance_by_class FROM classes;
SELECT product_id, sales_amount, LAST_VALUE(sales_amount) OVER(ORDER BY sales_amount RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_sales_amount FROM products;
SELECT content_id, views, LAST_VALUE(views) OVER(PARTITION BY content_type ORDER BY views RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_views_by_content_type FROM content_statistics;
SELECT store_id, sales, LAST_VALUE(sales) OVER(ORDER BY sales DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_sales_by_store FROM store_sales;
SELECT supplier_id, delivery_time, LAST_VALUE(delivery_time) OVER(PARTITION BY product_id ORDER BY delivery_time ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, LAST_VALUE(response_time) OVER(PARTITION BY survey_type ORDER BY response_time ASC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, LAST_VALUE(engagement_rate) OVER(PARTITION BY content_category ORDER BY engagement_rate DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, LAST_VALUE(response_time) OVER(PARTITION BY support_team ORDER BY response_time ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_response_time_by_support_team FROM support_tickets;
SELECT professor_id, publications, LAST_VALUE(publications) OVER(PARTITION BY department ORDER BY publications DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, LAST_VALUE(rank_points) OVER(PARTITION BY tournament ORDER BY rank_points DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, LAST_VALUE(refund_amount) OVER(PARTITION BY customer_id ORDER BY refund_date ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_refund_by_customer FROM refunds;
SELECT application_id, response_time, LAST_VALUE(response_time) OVER(PARTITION BY server ORDER BY response_time ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_application_response_time FROM server_logs;
SELECT store_id, expenses, LAST_VALUE(expenses) OVER(PARTITION BY store_category ORDER BY expenses DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, LAST_VALUE(match_score) OVER(PARTITION BY team ORDER BY match_date DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, LAST_VALUE(issue_severity) OVER(PARTITION BY support_team ORDER BY issue_severity DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, LAST_VALUE(profit_margin) OVER(PARTITION BY market ORDER BY profit_margin DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, LAST_VALUE(gpa) OVER(PARTITION BY school_id ORDER BY gpa DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_gpa_by_school FROM students;
SELECT video_id, likes, LAST_VALUE(likes) OVER(PARTITION BY category ORDER BY likes DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_likes_by_video FROM video_stats;
SELECT property_id, price, LAST_VALUE(price) OVER(PARTITION BY city ORDER BY price ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_price_by_city FROM property_listings;
SELECT project_id, completion_time, LAST_VALUE(completion_time) OVER(PARTITION BY project_manager ORDER BY completion_time ASC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, LAST_VALUE(books_published) OVER(PARTITION BY genre ORDER BY books_published DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_books_published_by_genre FROM authors;
SELECT student_id, test_score, LAST_VALUE(test_score) OVER(PARTITION BY test_type ORDER BY test_score DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, LAST_VALUE(patient_count) OVER(PARTITION BY city ORDER BY patient_count DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, LAST_VALUE(login_frequency) OVER(PARTITION BY platform ORDER BY login_frequency DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, LAST_VALUE(satisfaction_level) OVER(PARTITION BY service ORDER BY satisfaction_level DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, LAST_VALUE(hours_spent) OVER(PARTITION BY department ORDER BY hours_spent DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, LAST_VALUE(crime_rate) OVER(PARTITION BY region ORDER BY crime_rate ASC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, LAST_VALUE(rating) OVER(PARTITION BY service_category ORDER BY rating DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, LEAD(score, 1) OVER(PARTITION BY sport ORDER BY match_date ASC) AS next_score_in_sport FROM athlete_scores;
SELECT vehicle_id, mileage, LEAD(mileage, 2) OVER(PARTITION BY vehicle_type ORDER BY mileage DESC) AS mileage_two_positions_ahead FROM vehicle_records;
SELECT employee_id, hours_worked, LEAD(hours_worked, 1, 0) OVER(ORDER BY hours_worked ASC) AS next_hours_worked FROM timesheets;
SELECT branch_id, revenue, LEAD(revenue, 1) OVER(PARTITION BY region ORDER BY revenue DESC) AS next_revenue_by_region FROM branches;
SELECT city_id, population, LEAD(population, 1) OVER(ORDER BY population ASC) AS next_population_by_city FROM cities;
SELECT flight_id, delay_minutes, LEAD(delay_minutes, 2) OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS delay_two_flights_ahead FROM flight_delays;
SELECT class_id, attendance, LEAD(attendance, 1, 0) OVER(PARTITION BY class_id ORDER BY attendance ASC) AS next_attendance_in_class FROM classes;
SELECT product_id, sales_amount, LEAD(sales_amount, 1) OVER(ORDER BY sales_amount DESC) AS next_sales_amount FROM products;
SELECT content_id, views, LEAD(views, 1) OVER(PARTITION BY content_type ORDER BY views ASC) AS next_views_by_content_type FROM content_statistics;
SELECT store_id, sales, LEAD(sales, 2) OVER(ORDER BY sales DESC) AS sales_two_positions_ahead FROM store_sales;
SELECT supplier_id, delivery_time, LEAD(delivery_time, 1) OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS next_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, LEAD(response_time, 1, 0) OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS next_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, LEAD(engagement_rate, 1) OVER(PARTITION BY content_category ORDER BY engagement_rate ASC) AS next_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, LEAD(response_time, 2, 0) OVER(PARTITION BY support_team ORDER BY response_time ASC) AS response_two_tickets_ahead FROM support_tickets;
SELECT professor_id, publications, LEAD(publications, 1) OVER(PARTITION BY department ORDER BY publications DESC) AS next_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, LEAD(rank_points, 1) OVER(PARTITION BY tournament ORDER BY rank_points ASC) AS next_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, LEAD(refund_amount, 2) OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS refund_two_orders_ahead FROM refunds;
SELECT application_id, response_time, LEAD(response_time, 1, 0) OVER(PARTITION BY server ORDER BY response_time ASC) AS next_application_response_time FROM server_logs;
SELECT store_id, expenses, LEAD(expenses, 1) OVER(PARTITION BY store_category ORDER BY expenses DESC) AS next_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, LEAD(match_score, 2, 0) OVER(PARTITION BY team ORDER BY match_date ASC) AS score_two_matches_ahead FROM match_statistics;
SELECT ticket_id, issue_severity, LEAD(issue_severity, 1) OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS next_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, LEAD(profit_margin, 1) OVER(PARTITION BY market ORDER BY profit_margin ASC) AS next_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, LEAD(gpa, 1, 0) OVER(PARTITION BY school_id ORDER BY gpa ASC) AS next_gpa_by_school FROM students;
SELECT video_id, likes, LEAD(likes, 1) OVER(PARTITION BY category ORDER BY likes DESC) AS next_likes_by_video FROM video_stats;
SELECT property_id, price, LEAD(price, 2) OVER(PARTITION BY city ORDER BY price ASC) AS price_two_positions_ahead FROM property_listings;
SELECT project_id, completion_time, LEAD(completion_time, 1, 0) OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS next_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, LEAD(books_published, 1) OVER(PARTITION BY genre ORDER BY books_published DESC) AS next_books_published_by_genre FROM authors;
SELECT student_id, test_score, LEAD(test_score, 2, 0) OVER(PARTITION BY test_type ORDER BY test_score ASC) AS score_two_tests_ahead FROM test_results;
SELECT hospital_id, patient_count, LEAD(patient_count, 1) OVER(PARTITION BY city ORDER BY patient_count ASC) AS next_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, LEAD(login_frequency, 1, 0) OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS next_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, LEAD(satisfaction_level, 1, 0) OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS next_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, LEAD(hours_spent, 1) OVER(PARTITION BY department ORDER BY hours_spent ASC) AS next_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, LEAD(crime_rate, 2) OVER(PARTITION BY region ORDER BY crime_rate DESC) AS crime_rate_two_positions_ahead FROM crime_statistics;
SELECT service_id, rating, LEAD(rating, 1) OVER(PARTITION BY service_category ORDER BY rating ASC) AS next_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, NTH_VALUE(score, 2) OVER(PARTITION BY sport ORDER BY match_date DESC) AS second_highest_score_in_sport FROM athlete_scores;
SELECT vehicle_id, mileage, NTH_VALUE(mileage, 3) OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS third_lowest_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, NTH_VALUE(hours_worked, 1) OVER(ORDER BY hours_worked DESC) AS highest_hours_worked FROM timesheets;
SELECT branch_id, revenue, NTH_VALUE(revenue, 2) OVER(PARTITION BY region ORDER BY revenue DESC) AS second_highest_revenue_by_region FROM branches;
SELECT city_id, population, NTH_VALUE(population, 3) OVER(ORDER BY population ASC) AS third_lowest_population_by_city FROM cities;
SELECT flight_id, delay_minutes, NTH_VALUE(delay_minutes, 4) OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS fourth_longest_delay_by_airline FROM flight_delays;
SELECT class_id, attendance, NTH_VALUE(attendance, 2) OVER(PARTITION BY class_id ORDER BY attendance DESC) AS second_highest_attendance_in_class FROM classes;
SELECT product_id, sales_amount, NTH_VALUE(sales_amount, 3) OVER(ORDER BY sales_amount DESC) AS third_highest_sales_amount FROM products;
SELECT content_id, views, NTH_VALUE(views, 2) OVER(PARTITION BY content_type ORDER BY views ASC) AS second_lowest_views_by_content_type FROM content_statistics;
SELECT store_id, sales, NTH_VALUE(sales, 4) OVER(ORDER BY sales DESC) AS fourth_highest_sales_by_store FROM store_sales;
SELECT supplier_id, delivery_time, NTH_VALUE(delivery_time, 2) OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS second_fastest_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, NTH_VALUE(response_time, 3) OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS third_fastest_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, NTH_VALUE(engagement_rate, 1) OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS highest_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, NTH_VALUE(response_time, 2) OVER(PARTITION BY support_team ORDER BY response_time ASC) AS second_fastest_response_time_by_support_team FROM support_tickets;
SELECT professor_id, publications, NTH_VALUE(publications, 4) OVER(PARTITION BY department ORDER BY publications DESC) AS fourth_highest_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, NTH_VALUE(rank_points, 3) OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS third_highest_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, NTH_VALUE(refund_amount, 2) OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS second_refund_amount_by_customer FROM refunds;
SELECT application_id, response_time, NTH_VALUE(response_time, 2) OVER(PARTITION BY server ORDER BY response_time ASC) AS second_response_time_by_application FROM server_logs;
SELECT store_id, expenses, NTH_VALUE(expenses, 1) OVER(PARTITION BY store_category ORDER BY expenses DESC) AS highest_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, NTH_VALUE(match_score, 3) OVER(PARTITION BY team ORDER BY match_date ASC) AS third_highest_match_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, NTH_VALUE(issue_severity, 2) OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS second_highest_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, NTH_VALUE(profit_margin, 4) OVER(PARTITION BY market ORDER BY profit_margin DESC) AS fourth_highest_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, NTH_VALUE(gpa, 2) OVER(PARTITION BY school_id ORDER BY gpa DESC) AS second_highest_gpa_by_school FROM students;
SELECT video_id, likes, NTH_VALUE(likes, 3) OVER(PARTITION BY category ORDER BY likes DESC) AS third_highest_likes_by_video FROM video_stats;
SELECT property_id, price, NTH_VALUE(price, 2) OVER(PARTITION BY city ORDER BY price ASC) AS second_lowest_price_by_city FROM property_listings;
SELECT project_id, completion_time, NTH_VALUE(completion_time, 3) OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS third_shortest_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, NTH_VALUE(books_published, 1) OVER(PARTITION BY genre ORDER BY books_published DESC) AS highest_books_published_by_genre FROM authors;
SELECT student_id, test_score, NTH_VALUE(test_score, 2) OVER(PARTITION BY test_type ORDER BY test_score DESC) AS second_highest_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, NTH_VALUE(patient_count, 3) OVER(PARTITION BY city ORDER BY patient_count ASC) AS third_lowest_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, NTH_VALUE(login_frequency, 2) OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS second_highest_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, NTH_VALUE(satisfaction_level, 1) OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS highest_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, NTH_VALUE(hours_spent, 2) OVER(PARTITION BY department ORDER BY hours_spent DESC) AS second_highest_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, NTH_VALUE(crime_rate, 3) OVER(PARTITION BY region ORDER BY crime_rate DESC) AS third_highest_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, NTH_VALUE(rating, 2) OVER(PARTITION BY service_category ORDER BY rating ASC) AS second_lowest_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, NTILE(4) OVER(PARTITION BY sport ORDER BY score DESC) AS quartile_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, NTILE(3) OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS tercile_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, NTILE(5) OVER(ORDER BY hours_worked DESC) AS quintile_hours_worked FROM timesheets;
SELECT branch_id, revenue, NTILE(6) OVER(PARTITION BY region ORDER BY revenue DESC) AS sextile_revenue_by_region FROM branches;
SELECT city_id, population, NTILE(4) OVER(ORDER BY population ASC) AS quartile_population_by_city FROM cities;
SELECT flight_id, delay_minutes, NTILE(5) OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS quintile_delay_by_airline FROM flight_delays;
SELECT class_id, attendance, NTILE(3) OVER(PARTITION BY class_id ORDER BY attendance ASC) AS tercile_attendance_in_class FROM classes;
SELECT product_id, sales_amount, NTILE(8) OVER(ORDER BY sales_amount DESC) AS octile_sales_amount FROM products;
SELECT content_id, views, NTILE(5) OVER(PARTITION BY content_type ORDER BY views DESC) AS quintile_views_by_content_type FROM content_statistics;
SELECT store_id, sales, NTILE(7) OVER(ORDER BY sales DESC) AS septile_sales_by_store FROM store_sales;
SELECT supplier_id, delivery_time, NTILE(6) OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS sextile_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, NTILE(4) OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS quartile_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, NTILE(9) OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS nonile_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, NTILE(3) OVER(PARTITION BY support_team ORDER BY response_time ASC) AS tercile_response_time_by_support_team FROM support_tickets;
SELECT professor_id, publications, NTILE(5) OVER(PARTITION BY department ORDER BY publications DESC) AS quintile_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, NTILE(6) OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS sextile_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, NTILE(10) OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS decile_refund_by_customer FROM refunds;
SELECT application_id, response_time, NTILE(5) OVER(PARTITION BY server ORDER BY response_time ASC) AS quintile_response_time_by_application FROM server_logs;
SELECT store_id, expenses, NTILE(7) OVER(PARTITION BY store_category ORDER BY expenses DESC) AS septile_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, NTILE(4) OVER(PARTITION BY team ORDER BY match_date ASC) AS quartile_match_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, NTILE(3) OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS tercile_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, NTILE(5) OVER(PARTITION BY market ORDER BY profit_margin DESC) AS quintile_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, NTILE(6) OVER(PARTITION BY school_id ORDER BY gpa DESC) AS sextile_gpa_by_school FROM students;
SELECT video_id, likes, NTILE(8) OVER(PARTITION BY category ORDER BY likes DESC) AS octile_likes_by_video FROM video_stats;
SELECT property_id, price, NTILE(4) OVER(PARTITION BY city ORDER BY price ASC) AS quartile_price_by_city FROM property_listings;
SELECT project_id, completion_time, NTILE(7) OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS septile_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, NTILE(5) OVER(PARTITION BY genre ORDER BY books_published DESC) AS quintile_books_published_by_genre FROM authors;
SELECT student_id, test_score, NTILE(9) OVER(PARTITION BY test_type ORDER BY test_score DESC) AS nonile_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, NTILE(6) OVER(PARTITION BY city ORDER BY patient_count ASC) AS sextile_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, NTILE(8) OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS octile_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, NTILE(3) OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS tercile_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, NTILE(5) OVER(PARTITION BY department ORDER BY hours_spent DESC) AS quintile_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, NTILE(4) OVER(PARTITION BY region ORDER BY crime_rate DESC) AS quartile_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, NTILE(9) OVER(PARTITION BY service_category ORDER BY rating ASC) AS nonile_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, PERCENT_RANK() OVER(PARTITION BY sport ORDER BY score DESC) AS percent_rank_score_by_sport FROM athlete_scores;
SELECT vehicle_id, mileage, PERCENT_RANK() OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS percent_rank_mileage_by_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, PERCENT_RANK() OVER(ORDER BY hours_worked DESC) AS percent_rank_hours_worked FROM timesheets;
SELECT branch_id, revenue, PERCENT_RANK() OVER(PARTITION BY region ORDER BY revenue DESC) AS percent_rank_revenue_by_region FROM branches;
SELECT city_id, population, PERCENT_RANK() OVER(ORDER BY population DESC) AS percent_rank_population_by_city FROM cities;
SELECT flight_id, delay_minutes, PERCENT_RANK() OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS percent_rank_delay_by_airline FROM flight_delays;
SELECT class_id, attendance, PERCENT_RANK() OVER(PARTITION BY class_id ORDER BY attendance ASC) AS percent_rank_attendance_in_class FROM classes;
SELECT product_id, sales_amount, PERCENT_RANK() OVER(ORDER BY sales_amount DESC) AS percent_rank_sales_amount FROM products;
SELECT content_id, views, PERCENT_RANK() OVER(PARTITION BY content_type ORDER BY views DESC) AS percent_rank_views_by_content_type FROM content_statistics;
SELECT store_id, sales, PERCENT_RANK() OVER(ORDER BY sales DESC) AS percent_rank_sales_by_store FROM store_sales;
SELECT supplier_id, delivery_time, PERCENT_RANK() OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS percent_rank_delivery_time_by_product FROM supplier_deliveries;
SELECT survey_id, response_time, PERCENT_RANK() OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS percent_rank_response_time_by_survey FROM survey_responses;
SELECT content_id, engagement_rate, PERCENT_RANK() OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS percent_rank_engagement_rate_by_category FROM content_metrics;
SELECT ticket_id, response_time, PERCENT_RANK() OVER(PARTITION BY support_team ORDER BY response_time ASC) AS percent_rank_response_time_by_support_team FROM support_tickets;
SELECT professor_id, publications, PERCENT_RANK() OVER(PARTITION BY department ORDER BY publications DESC) AS percent_rank_publications_by_professor FROM professors;
SELECT athlete_id, rank_points, PERCENT_RANK() OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS percent_rank_rank_points_in_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, PERCENT_RANK() OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS percent_rank_refund_by_customer FROM refunds;
SELECT application_id, response_time, PERCENT_RANK() OVER(PARTITION BY server ORDER BY response_time ASC) AS percent_rank_response_time_by_application FROM server_logs;
SELECT store_id, expenses, PERCENT_RANK() OVER(PARTITION BY store_category ORDER BY expenses DESC) AS percent_rank_expenses_by_store_category FROM store_expenses;
SELECT match_id, match_score, PERCENT_RANK() OVER(PARTITION BY team ORDER BY match_date ASC) AS percent_rank_match_score_by_team FROM match_statistics;
SELECT ticket_id, issue_severity, PERCENT_RANK() OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS percent_rank_issue_severity_by_team FROM issue_tracking;
SELECT region_id, profit_margin, PERCENT_RANK() OVER(PARTITION BY market ORDER BY profit_margin DESC) AS percent_rank_profit_margin_by_market FROM market_analysis;
SELECT student_id, gpa, PERCENT_RANK() OVER(PARTITION BY school_id ORDER BY gpa DESC) AS percent_rank_gpa_by_school FROM students;
SELECT video_id, likes, PERCENT_RANK() OVER(PARTITION BY category ORDER BY likes DESC) AS percent_rank_likes_by_video FROM video_stats;
SELECT property_id, price, PERCENT_RANK() OVER(PARTITION BY city ORDER BY price ASC) AS percent_rank_price_by_city FROM property_listings;
SELECT project_id, completion_time, PERCENT_RANK() OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS percent_rank_completion_time_by_manager FROM project_data;
SELECT author_id, books_published, PERCENT_RANK() OVER(PARTITION BY genre ORDER BY books_published DESC) AS percent_rank_books_published_by_genre FROM authors;
SELECT student_id, test_score, PERCENT_RANK() OVER(PARTITION BY test_type ORDER BY test_score DESC) AS percent_rank_test_score_by_type FROM test_results;
SELECT hospital_id, patient_count, PERCENT_RANK() OVER(PARTITION BY city ORDER BY patient_count DESC) AS percent_rank_patient_count_by_city FROM hospitals;
SELECT user_id, login_frequency, PERCENT_RANK() OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS percent_rank_login_frequency_by_platform FROM user_activity;
SELECT survey_id, satisfaction_level, PERCENT_RANK() OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS percent_rank_satisfaction_by_service FROM survey_data;
SELECT project_id, hours_spent, PERCENT_RANK() OVER(PARTITION BY department ORDER BY hours_spent DESC) AS percent_rank_hours_spent_by_department FROM projects;
SELECT city_id, crime_rate, PERCENT_RANK() OVER(PARTITION BY region ORDER BY crime_rate DESC) AS percent_rank_crime_rate_by_region FROM crime_statistics;
SELECT service_id, rating, PERCENT_RANK() OVER(PARTITION BY service_category ORDER BY rating ASC) AS percent_rank_rating_by_service_category FROM service_reviews;

SELECT athlete_id, score, RANK() OVER(PARTITION BY sport ORDER BY score DESC) AS score_rank_sport FROM athlete_scores;
SELECT vehicle_id, mileage, RANK() OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS mileage_rank_vehicle_type FROM vehicle_records;
SELECT employee_id, hours_worked, RANK() OVER(ORDER BY hours_worked DESC) AS hours_worked_rank_all FROM timesheets;
SELECT branch_id, revenue, RANK() OVER(PARTITION BY region ORDER BY revenue DESC) AS revenue_rank_region FROM branches;
SELECT city_id, population, RANK() OVER(ORDER BY population DESC) AS population_rank_city FROM cities;
SELECT flight_id, delay_minutes, RANK() OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS delay_rank_airline FROM flight_delays;
SELECT class_id, attendance, RANK() OVER(PARTITION BY class_id ORDER BY attendance ASC) AS attendance_rank_class FROM classes;
SELECT product_id, sales_amount, RANK() OVER(ORDER BY sales_amount DESC) AS sales_amount_rank_all FROM products;
SELECT content_id, views, RANK() OVER(PARTITION BY content_type ORDER BY views DESC) AS views_rank_content_type FROM content_statistics;
SELECT store_id, sales, RANK() OVER(ORDER BY sales DESC) AS sales_rank_store FROM store_sales;
SELECT supplier_id, delivery_time, RANK() OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS delivery_time_rank_product FROM supplier_deliveries;
SELECT survey_id, response_time, RANK() OVER(PARTITION BY survey_type ORDER BY response_time ASC) AS response_time_rank_survey FROM survey_responses;
SELECT content_id, engagement_rate, RANK() OVER(PARTITION BY content_category ORDER BY engagement_rate DESC) AS engagement_rate_rank_content_category FROM content_metrics;
SELECT ticket_id, response_time, RANK() OVER(PARTITION BY support_team ORDER BY response_time ASC) AS response_time_rank_support_team FROM support_tickets;
SELECT professor_id, publications, RANK() OVER(PARTITION BY department ORDER BY publications DESC) AS publications_rank_professor FROM professors;
SELECT athlete_id, rank_points, RANK() OVER(PARTITION BY tournament ORDER BY rank_points DESC) AS rank_points_rank_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, RANK() OVER(PARTITION BY customer_id ORDER BY refund_date ASC) AS refund_rank_customer FROM refunds;
SELECT application_id, response_time, RANK() OVER(PARTITION BY server ORDER BY response_time ASC) AS response_time_rank_application FROM server_logs;
SELECT store_id, expenses, RANK() OVER(PARTITION BY store_category ORDER BY expenses DESC) AS expenses_rank_store_category FROM store_expenses;
SELECT match_id, match_score, RANK() OVER(PARTITION BY team ORDER BY match_date ASC) AS match_score_rank_team FROM match_statistics;
SELECT ticket_id, issue_severity, RANK() OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS issue_severity_rank_support_team FROM issue_tracking;
SELECT region_id, profit_margin, RANK() OVER(PARTITION BY market ORDER BY profit_margin DESC) AS profit_margin_rank_market FROM market_analysis;
SELECT student_id, gpa, RANK() OVER(PARTITION BY school_id ORDER BY gpa DESC) AS gpa_rank_school FROM students;
SELECT video_id, likes, RANK() OVER(PARTITION BY category ORDER BY likes DESC) AS likes_rank_video_category FROM video_stats;
SELECT property_id, price, RANK() OVER(PARTITION BY city ORDER BY price ASC) AS price_rank_property_city FROM property_listings;
SELECT project_id, completion_time, RANK() OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS completion_time_rank_manager FROM project_data;
SELECT author_id, books_published, RANK() OVER(PARTITION BY genre ORDER BY books_published DESC) AS books_published_rank_genre FROM authors;
SELECT student_id, test_score, RANK() OVER(PARTITION BY test_type ORDER BY test_score DESC) AS test_score_rank_type FROM test_results;
SELECT hospital_id, patient_count, RANK() OVER(PARTITION BY city ORDER BY patient_count DESC) AS patient_count_rank_hospital_city FROM hospitals;
SELECT user_id, login_frequency, RANK() OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS login_frequency_rank_platform FROM user_activity;
SELECT survey_id, satisfaction_level, RANK() OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS satisfaction_level_rank_service FROM survey_data;
SELECT project_id, hours_spent, RANK() OVER(PARTITION BY department ORDER BY hours_spent DESC) AS hours_spent_rank_department FROM projects;
SELECT city_id, crime_rate, RANK() OVER(PARTITION BY region ORDER BY crime_rate DESC) AS crime_rate_rank_region FROM crime_statistics;
SELECT service_id, rating, RANK() OVER(PARTITION BY service_category ORDER BY rating ASC) AS rating_rank_service_category FROM service_reviews;

SELECT employee_id, ROW_NUMBER() OVER(ORDER BY hire_date ASC) AS row_number_by_hire_date_all FROM employees;
SELECT athlete_id, score, ROW_NUMBER() OVER(PARTITION BY sport ORDER BY score DESC) AS row_number_score_sport FROM athlete_scores;
SELECT vehicle_id, mileage, ROW_NUMBER() OVER(PARTITION BY vehicle_type ORDER BY mileage ASC) AS row_number_mileage_vehicle_type FROM vehicle_records;
SELECT branch_id, revenue, ROW_NUMBER() OVER(PARTITION BY region ORDER BY revenue DESC) AS row_number_revenue_region FROM branches;
SELECT city_id, population, ROW_NUMBER() OVER(ORDER BY population ASC) AS row_number_population_all_cities FROM cities;
SELECT flight_id, delay_minutes, ROW_NUMBER() OVER(PARTITION BY airline ORDER BY delay_minutes DESC) AS row_number_delay_airline FROM flight_delays;
SELECT class_id, attendance, ROW_NUMBER() OVER(PARTITION BY grade_level ORDER BY attendance DESC) AS row_number_attendance_grade_level FROM classes;
SELECT product_id, sales_amount, ROW_NUMBER() OVER(ORDER BY sales_amount DESC) AS row_number_sales_all_products FROM products;
SELECT content_id, views, ROW_NUMBER() OVER(PARTITION BY content_type ORDER BY views DESC) AS row_number_views_content_type FROM content_statistics;
SELECT store_id, sales, ROW_NUMBER() OVER(ORDER BY sales ASC) AS row_number_sales_all_stores FROM store_sales;
SELECT supplier_id, delivery_time, ROW_NUMBER() OVER(PARTITION BY product_id ORDER BY delivery_time ASC) AS row_number_delivery_time_product FROM supplier_deliveries;
SELECT survey_id, response_time, ROW_NUMBER() OVER(PARTITION BY survey_type ORDER BY response_time DESC) AS row_number_response_time_survey FROM survey_responses;
SELECT content_id, engagement_rate, ROW_NUMBER() OVER(PARTITION BY content_category ORDER BY engagement_rate ASC) AS row_number_engagement_rate_content_category FROM content_metrics;
SELECT ticket_id, response_time, ROW_NUMBER() OVER(PARTITION BY support_team ORDER BY response_time ASC) AS row_number_response_time_support_team FROM support_tickets;
SELECT professor_id, publications, ROW_NUMBER() OVER(PARTITION BY department ORDER BY publications DESC) AS row_number_publications_department FROM professors;
SELECT athlete_id, rank_points, ROW_NUMBER() OVER(PARTITION BY tournament ORDER BY rank_points ASC) AS row_number_rank_points_tournament FROM athlete_rankings;
SELECT order_id, refund_amount, ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY refund_date DESC) AS row_number_refund_customer FROM refunds;
SELECT application_id, response_time, ROW_NUMBER() OVER(PARTITION BY server ORDER BY response_time ASC) AS row_number_response_time_application FROM server_logs;
SELECT store_id, expenses, ROW_NUMBER() OVER(PARTITION BY store_category ORDER BY expenses DESC) AS row_number_expenses_store_category FROM store_expenses;
SELECT match_id, match_score, ROW_NUMBER() OVER(PARTITION BY team ORDER BY match_date ASC) AS row_number_match_score_team FROM match_statistics;
SELECT ticket_id, issue_severity, ROW_NUMBER() OVER(PARTITION BY support_team ORDER BY issue_severity DESC) AS row_number_issue_severity_support_team FROM issue_tracking;
SELECT region_id, profit_margin, ROW_NUMBER() OVER(PARTITION BY market ORDER BY profit_margin DESC) AS row_number_profit_margin_market FROM market_analysis;
SELECT student_id, gpa, ROW_NUMBER() OVER(PARTITION BY school_id ORDER BY gpa DESC) AS row_number_gpa_school FROM students;
SELECT video_id, likes, ROW_NUMBER() OVER(PARTITION BY category ORDER BY likes DESC) AS row_number_likes_video_category FROM video_stats;
SELECT property_id, price, ROW_NUMBER() OVER(PARTITION BY city ORDER BY price ASC) AS row_number_price_property_city FROM property_listings;
SELECT project_id, completion_time, ROW_NUMBER() OVER(PARTITION BY project_manager ORDER BY completion_time ASC) AS row_number_completion_time_manager FROM project_data;
SELECT author_id, books_published, ROW_NUMBER() OVER(PARTITION BY genre ORDER BY books_published DESC) AS row_number_books_published_genre FROM authors;
SELECT student_id, test_score, ROW_NUMBER() OVER(PARTITION BY test_type ORDER BY test_score DESC) AS row_number_test_score_type FROM test_results;
SELECT hospital_id, patient_count, ROW_NUMBER() OVER(PARTITION BY city ORDER BY patient_count ASC) AS row_number_patient_count_city FROM hospitals;
SELECT user_id, login_frequency, ROW_NUMBER() OVER(PARTITION BY platform ORDER BY login_frequency DESC) AS row_number_login_frequency_platform FROM user_activity;
SELECT survey_id, satisfaction_level, ROW_NUMBER() OVER(PARTITION BY service ORDER BY satisfaction_level DESC) AS row_number_satisfaction_level_service FROM survey_data;
SELECT project_id, hours_spent, ROW_NUMBER() OVER(PARTITION BY department ORDER BY hours_spent DESC) AS row_number_hours_spent_department FROM projects;
SELECT city_id, crime_rate, ROW_NUMBER() OVER(PARTITION BY region ORDER BY crime_rate DESC) AS row_number_crime_rate_region FROM crime_statistics;
SELECT service_id, rating, ROW_NUMBER() OVER(PARTITION BY service_category ORDER BY rating ASC) AS row_number_rating_service_category FROM service_reviews;
