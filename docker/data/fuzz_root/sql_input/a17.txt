CREATE TABLE t1 (id INTEGER PRIMARY KEY, description VARCHAR(50), category VARCHAR(20) GENERATED ALWAYS AS (CASE WHEN id % 2 = 0 THEN 'even' ELSE 'odd' END) STORED); CREATE TABLE t0 (c0 INTEGER, c1 VARCHAR(20) GENERATED ALWAYS AS (CASE WHEN c0 > 10 THEN 'v0' WHEN c0 BETWEEN 5 AND 10 THEN 'v1' ELSE 'v2' END) STORED, c2 INTEGER, FOREIGN KEY (c0) REFERENCES t1(id)); INSERT INTO t1 (id, description) VALUES (3, 'Low value'), (7, 'Moderate value'), (15, 'High value'); INSERT INTO t0 (c0) VALUES (3), (7), (15); WITH cte AS (SELECT t0.c0, t0.c1, t0.c2, t1.description, t1.category, RANK() OVER (PARTITION BY t1.category ORDER BY t0.c0 DESC) AS rank_position, DENSE_RANK() OVER (PARTITION BY t1.category ORDER BY t0.c0) AS dense_rank_position, NTILE(3) OVER (PARTITION BY t1.category ORDER BY t0.c0 DESC) AS quantile_group, SUM(t0.c2) OVER (PARTITION BY t1.category ORDER BY t0.c0 DESC) AS cumulative_sum, FIRST_VALUE(t0.c2) OVER (PARTITION BY t1.category ORDER BY t0.c0 DESC) AS initial_value, LAST_VALUE(t0.c2) OVER (PARTITION BY t1.category ORDER BY t0.c0 DESC) AS final_value FROM t0 JOIN t1 ON t0.c0 = t1.id) SELECT cte.c0 AS id, cte.c1 AS name, cte.description, cte.category, CONCAT('Rank ', cte.rank_position, ' in ', cte.category) AS rank_description, CONCAT('Group ', cte.quantile_group) AS quantile_description, cte.cumulative_sum, cte.initial_value, cte.final_value FROM cte ORDER BY cte.category, cte.rank_position;