CREATE TABLE other_table (id INTEGER, name TEXT, score INTEGER); CREATE TEMPORARY TABLE v0 AS SELECT id, name, score FROM other_table; CREATE VIEW view_above_id2 AS SELECT id, name, ABS(score) AS abs_score FROM other_table WHERE id >= 2; WITH cte_combined AS (SELECT v0.id AS original_id, v0.name AS original_name, v0.score AS original_score, view_above_id2.id AS view_id, view_above_id2.name AS view_name, view_above_id2.abs_score AS view_abs_score, ROW_NUMBER() OVER (PARTITION BY v0.id ORDER BY v0.score DESC) AS row_num, RANK() OVER (PARTITION BY v0.id ORDER BY v0.score DESC) AS rank1, DENSE_RANK() OVER (PARTITION BY v0.id ORDER BY v0.score DESC) AS dense_rank1, SUM(CAST(v0.score AS INTEGER)) OVER (PARTITION BY v0.id ORDER BY v0.score) AS cumulative_sum, AVG(CAST(v0.score AS INTEGER)) OVER (PARTITION BY v0.id ORDER BY v0.score) AS avg_score, LAG(v0.score, 1, 0) OVER (PARTITION BY v0.id ORDER BY v0.score) AS previous_score FROM v0 LEFT JOIN view_above_id2 ON v0.id = view_above_id2.id) SELECT cte_combined.original_id, cte_combined.original_name, cte_combined.original_score, cte_combined.view_id, cte_combined.view_name, cte_combined.view_abs_score, cte_combined.row_num, cte_combined.rank1, cte_combined.dense_rank1, cte_combined.cumulative_sum, cte_combined.avg_score, cte_combined.previous_score, CASE WHEN cte_combined.view_id IS NOT NULL THEN 'Exists in View' ELSE 'Not in View' END AS view_status FROM cte_combined ORDER BY cte_combined.original_id;