SELECT c0, MIN(10) OVER (ORDER BY c0) AS min_literal FROM t0;
SELECT c0, MIN(c0) OVER (ORDER BY c0) AS min_column FROM t0;
SELECT c0, c1, MIN(c0) OVER (PARTITION BY c1 ORDER BY c0) AS min_partition FROM t0;
SELECT c0, c1, MIN(10) OVER (PARTITION BY c1 ORDER BY c0) AS min_partition_literal FROM t0;
SELECT c0, MIN(c0) OVER (ORDER BY c0) AS min_order FROM t0;
SELECT c0, MIN(c0) OVER (ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS min_rows_frame FROM t0;
SELECT c0, MIN(c0) OVER (ORDER BY c0 RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING) AS min_range_frame FROM t0;
SELECT c0, c1, MIN(c0) OVER (PARTITION BY c1 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS min_partition_rows_frame FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 > 0) OVER (ORDER BY c0) AS min_filtered FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 > 0) OVER (PARTITION BY c1 ORDER BY c0) AS min_partition_filtered FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 > 0) OVER (ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS min_filtered_rows_frame FROM t0;
SELECT c0, MIN(CAST(c0 AS INTEGER)) OVER (ORDER BY c0) AS min_cast FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 LIKE 'pattern%') OVER (ORDER BY c0) AS min_like_filtered FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 IS NULL) OVER (ORDER BY c0) AS min_is_null_filtered FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 BETWEEN 1 AND 10) OVER (ORDER BY c0) AS min_between_filtered FROM t0;
SELECT c0, c1, MIN(c0) FILTER (WHERE c1 IN (1, 2, 3)) OVER (ORDER BY c0) AS min_in_filtered FROM t0;
SELECT c0, c1, MIN(CASE WHEN c1 > 0 THEN c0 ELSE NULL END) OVER (ORDER BY c0) AS min_case FROM t0;
SELECT c0, MIN(c0) OVER (ORDER BY c0) AS min_exists FROM t0 WHERE EXISTS (SELECT 1 FROM t1 WHERE t1.c0 = t0.c0);
SELECT c0, c1, MIN(c0 + -c1) OVER (ORDER BY c0) AS min_binary_unary FROM t0;
SELECT c0, c1, MIN(c0 + ABS(c1)) OVER (ORDER BY c0) AS min_binary_function FROM t0;
SELECT c0, MIN(ABS(CAST(c0 AS INTEGER))) OVER (ORDER BY c0) AS min_function_cast FROM t0;
SELECT c0, c1, c2, c3, MIN(CASE WHEN c1 > 0 THEN ABS(c0) ELSE NULL END) FILTER (WHERE c2 BETWEEN 5 AND 15) OVER (ORDER BY c3) AS min_case_function_between_filtered FROM t0;
SELECT c0, c1, c2, c3, MIN(c0 + c1) FILTER (WHERE c2 LIKE 'pattern%') OVER (ORDER BY c3) AS min_binary_like_filtered FROM t0;
SELECT department,MIN(salary) OVER(PARTITION BY department) AS min_salary_by_department FROM employees;
SELECT MIN(salary) OVER(ORDER BY hire_date DESC) AS min_salary_recent_hires FROM employees;
SELECT department,MIN(bonus) OVER(PARTITION BY department ORDER BY hire_date) AS min_bonus_by_department_over_time FROM employees;
SELECT MIN(price) OVER(PARTITION BY category) AS min_price_by_category FROM products;
SELECT MIN(score) OVER(ORDER BY exam_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_min_score FROM exam_scores;
SELECT department,MIN(hours_worked) OVER(PARTITION BY department RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS min_hours_worked_by_department FROM timesheets;
SELECT MIN(revenue) OVER(PARTITION BY col_year ORDER BY col_month) AS min_revenue_over_months FROM monthly_revenues;
SELECT department,MIN(project_duration) OVER(PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING) AS min_project_duration_within_department FROM projects;
SELECT MIN(order_total) OVER(ORDER BY order_date RANGE BETWEEN 1 PRECEDING AND CURRENT ROW) AS min_order_last_month FROM orders;
SELECT MIN(rating) OVER(PARTITION BY category ORDER BY submission_date DESC) AS min_rating_by_category FROM reviews;