SELECT employee_id, CUME_DIST() OVER (PARTITION BY department_id ORDER BY salary DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_dist FROM employees;
SELECT employee_id, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY hire_date DESC) AS dense_rank1 FROM employees;
SELECT employee_id, PERCENT_RANK() OVER (ORDER BY salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS percent_rank1 FROM employees;
SELECT employee_id, RANK() OVER (PARTITION BY department_id ORDER BY hire_date RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS rank1 FROM employees;
SELECT employee_id, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary) AS row_num1 FROM employees;
SELECT employee_id, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_salary1 FROM employees;
SELECT employee_id, LEAD(salary, 1, 0) OVER (ORDER BY hire_date DESC) AS next_salary1 FROM employees;
SELECT employee_id, NTILE(4) OVER (PARTITION BY department_id ORDER BY salary RANGE BETWEEN 2 PRECEDING AND CURRENT ROW) AS quartile1 FROM employees;
SELECT employee_id, FIRST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_salary1 FROM employees;
SELECT employee_id, LAST_VALUE(salary) OVER (ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_salary1 FROM employees;
SELECT employee_id, NTH_VALUE(salary, 2) OVER (PARTITION BY department_id ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS nth_salary1 FROM employees;
SELECT employee_id, SUM(salary) OVER (PARTITION BY department_id ORDER BY hire_date ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING) AS sum_salary1 FROM employees;
SELECT employee_id, AVG(salary) OVER (ORDER BY salary DESC ROWS BETWEEN 5 PRECEDING AND CURRENT ROW) AS avg_salary1 FROM employees;
SELECT employee_id, COUNT(*) OVER (PARTITION BY department_id ORDER BY hire_date RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS count_employees1 FROM employees;
SELECT employee_id, MAX(salary) OVER (PARTITION BY department_id ORDER BY hire_date DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS max_salary1 FROM employees;
SELECT employee_id, MIN(salary) OVER (ORDER BY hire_date RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS min_salary1 FROM employees;
